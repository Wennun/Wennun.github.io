{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}},"post_list":[{"title":"【基础算法】单链表的OJ练习(2)","uid":"98becb8c7065890d0806582243945652","slug":"【基础算法】单链表的OJ练习-2-链表的中间结点-链表中倒数第k个结点","date":"2023-03-03T15:53:57.000Z","updated":"2023-03-03T15:58:34.903Z","comments":true,"path":"api/articles/【基础算法】单链表的OJ练习-2-链表的中间结点-链表中倒数第k个结点.json","keywords":null,"cover":"/photo/R-C (3).jpeg","text":"前言 对于单链表的OJ练习，需要深刻理解做题的思路，这样我们才能够在任何场景都能够熟练的解答有关链表的问题。 关于OJ练习（1）：&#x3D;&#x3D;-&gt;&#x3D;&#x3D; 传送门 &#x3D;&#x3D;&lt;-&#x3D;&#x3D;，其题目较为简单，思路也...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":6,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","count":6,"path":"api/tags/数据结构与算法.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}},"feature":true},{"title":"【基础算法】单链表的OJ练习(1)","uid":"7ca2e84fccf5532a68e25ef3af8a8b80","slug":"【基础算法】单链表的OJ练习-1-反转链表-合并两个有序链表","date":"2023-03-03T15:53:46.000Z","updated":"2023-03-03T15:57:14.395Z","comments":true,"path":"api/articles/【基础算法】单链表的OJ练习-1-反转链表-合并两个有序链表.json","keywords":null,"cover":"/photo/R-C (4).jpeg","text":"前言 上一章讲解了单链表 &#x3D;&#x3D;-&gt;&#x3D;&#x3D; 传送门 &#x3D;&#x3D;&lt;-&#x3D;&#x3D; ，后面几章就对单链表进行一些简单的题目练习，目的是为了更好的理解单链表的实现以及加深对某些函数接口的熟练度。 本章带来了两个题...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":6,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","count":6,"path":"api/tags/数据结构与算法.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}},"feature":true},{"title":"【数据结构】单链表","uid":"bfad240cf4f429ffe303cb01324aaae0","slug":"【数据结构】单链表","date":"2023-03-03T15:53:13.000Z","updated":"2023-03-03T15:56:22.300Z","comments":true,"path":"api/articles/【数据结构】单链表.json","keywords":null,"cover":"/photo/v2-99dff3d20928f72a1edd7aa1bebc4a21_r.jpg","text":" 前言 在学习数据结构时，单链表可谓是第一个需要跨越的台阶。 从C语言到数据结构，单链表能够真正的反映我们C语言到底学的扎不扎实，那是因为，单链表对于C语言中的指针，结构体，以及函数模块的实现有较高的要求。因此，通过本章的学习，要是能够自我实现单链表，那你的C语言功底会厚实，你的...","link":"","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"21 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":6,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","count":6,"path":"api/tags/数据结构与算法.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}},"feature":true},{"title":"【数据结构】顺序表","uid":"acb938686160e729bc4dce5cef8311df","slug":"【数据结构】顺序表","date":"2023-03-03T15:53:00.000Z","updated":"2023-03-03T15:55:09.846Z","comments":true,"path":"api/articles/【数据结构】顺序表.json","keywords":null,"cover":"/photo/屏幕截图_20230122_043538.png","text":"前言 顺序表作为数据结构中的小小弟，还是很好应付的。说到数据结构，顺序表是我们的向导，它让你明白数据结构到底是干啥的，为啥数据结构这么的重要。 实际上，通讯录的底层就是一个顺序表，里面的增添联系人，删除联系人等一系列操作，都是基于顺序表实现的，这也侧面拖出了数据结构的作用。所以，...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":6,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","count":6,"path":"api/tags/数据结构与算法.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}},"feature":null},{"title":"带你轻松实现通讯录(C语言版)","uid":"d8d9f05eeb5cca634b8a4aa98273e85e","slug":"带你轻松实现通讯录-C语言版","date":"2023-03-03T15:50:40.000Z","updated":"2023-03-03T15:54:23.002Z","comments":true,"path":"api/articles/带你轻松实现通讯录-C语言版.json","keywords":null,"cover":"/photo/屏幕截图_20230218_121115.png","text":" 前言 学习&#x3D;&#x3D;C语言&#x3D;&#x3D;的小伙伴，相信都要经历实现通讯录这一关吧，接下来就带你手把手实现自己的通讯录！ 通讯录初始化 整个程序我们需要分三个文件，一个是头文件：Contacts.h：用来存放宏，结构体以及函数声明，还有需要用的库函数。一个...","link":"","photos":[],"count_time":{"symbolsCount":"30k","symbolsTime":"27 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"【基础算法】关于高精度计算的问题【很高位数数据的加减乘除(相关代码用C++实现)】","uid":"48de73fbd4a7bbcd1c473c6c29503249","slug":"【基础算法】关于高精度计算的问题【很高位数数据的加减乘除-相关代码用C-实现-】","date":"2023-03-03T15:49:06.000Z","updated":"2023-03-03T15:50:14.498Z","comments":true,"path":"api/articles/【基础算法】关于高精度计算的问题【很高位数数据的加减乘除-相关代码用C-实现-】.json","keywords":null,"cover":"/photo/R-C (6).jpeg","text":"前言 当我们在利用计算机进行一些计算时，可能会遇到这类问题 ： 有些计算要求精度高，希望计算的数的位数可达几十位甚至几百位，虽然计算机的计算精度也算较高了，但因受到硬件的限制，往往达不到实际问题所要求的精度。 这时我们就可以通过程序设计来解决这类问题，例如：创建一个数组，通过数组...","link":"","photos":[],"count_time":{"symbolsCount":"8.2k","symbolsTime":"7 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":6,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","count":6,"path":"api/tags/数据结构与算法.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}},"feature":null},{"title":"【数据结构与算法】算法的时间复杂度和空间复杂度","uid":"73ff783753dfb9187579f115eb370182","slug":"【数据结构与算法】算法的时间复杂度和空间复杂度","date":"2023-03-03T15:45:47.000Z","updated":"2023-03-03T15:48:47.845Z","comments":true,"path":"api/articles/【数据结构与算法】算法的时间复杂度和空间复杂度.json","keywords":null,"cover":"/photo/屏幕截图_20230122_043306.png","text":" 前言 关于时空复杂度的分析，是每一个程序员的必备技能，本文将带你了解什么是时空复杂度？熟知怎样去计算一个算法的时间复杂度和空间复杂度。 1.算法效率1.1.如何衡量一个算法的好坏如何衡量一个算法的好坏呢？我们先看一段代码： int Fib(int N) &#123; if(N ...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","count":6,"path":"api/categories/数据结构与算法.json"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","count":6,"path":"api/tags/数据结构与算法.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}},"feature":null},{"title":"关于常引用的问题","uid":"53f3e274c7bda3bde7e9b295614179bc","slug":"关于常引用的问题-什么是权限放大？权限放小？隐式或强制转换居然还有这一步？","date":"2023-02-18T06:45:14.000Z","updated":"2023-02-18T06:54:00.841Z","comments":true,"path":"api/articles/关于常引用的问题-什么是权限放大？权限放小？隐式或强制转换居然还有这一步？.json","keywords":null,"cover":"/photo/屏幕截图_20230122_040600.png","text":"前言 引用在c++中的使用非常常见，可以说是很重要的，引用的常引用相关的问题让很多人稍不留神就出错了，这里我们就来谈谈常引用的问题。 关于权限 关于权限有权限缩小和权限放大的问题，比如一个文件，当初它只有读的权限，而现在你给它再加个写的权限，这就是权限放大；又或当初它读，写的权限...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"C++阶段相关知识点与问题的深度解析","slug":"C-阶段相关知识点与问题的深度解析","count":1,"path":"api/categories/C-阶段相关知识点与问题的深度解析.json"}],"tags":[{"name":"C++","slug":"C","count":1,"path":"api/tags/C.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"C语言预处理相关知识的介绍和解析","uid":"10386f8dcb44ec1bbe05b4072762a00e","slug":"C语言预处理相关知识的介绍和解析","date":"2023-02-18T06:43:28.000Z","updated":"2023-02-18T06:54:28.828Z","comments":true,"path":"api/articles/C语言预处理相关知识的介绍和解析.json","keywords":null,"cover":"/photo/屏幕截图_20230122_044157.png","text":" 前言 上篇文章介绍了一个程序运行的 编译与链接 ，其中编译阶段有个预处理，他会对一些预处理指令进行处理，本章就对这些预处理相关的指令，操作符等等进行探讨。 预定义符号介绍 这里介绍一些可能会常用到的符号： __FILE__ &#x2F;&#x2F;进行编译的源文件 __LINE...","link":"","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"程序的编译与链接","uid":"9644227715b55b99af65739565b00100","slug":"程序的编译与链接","date":"2023-02-18T06:41:16.000Z","updated":"2023-02-18T06:42:20.604Z","comments":true,"path":"api/articles/程序的编译与链接.json","keywords":null,"cover":"/photo/屏幕截图_20230218_121142.png","text":" 前言 每当我们运行一段代码时，编译器都会自动的帮我们编译代码并将代码转换为一个二进制可执行文件（.exe）， 有了这个可执行文件，便可以执行我们写的程序了。那么编译器对代码的编译以及生成可执行程序的过程是怎样的呢？这个问题便是本文章将要探讨的。 程序的环境在ANSI C的任何一...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"关于C语言对文件的操作","uid":"c2996624a24a0b1686f1aaf8ff1ca6e4","slug":"关于C语言对文件的操作","date":"2023-02-18T06:38:53.000Z","updated":"2023-02-18T06:40:40.114Z","comments":true,"path":"api/articles/关于C语言对文件的操作.json","keywords":null,"cover":"/photo/屏幕截图_20230218_121321.png","text":"前言 相信大家对文件都不陌生，我们在计算机的一系列操作都离不开文件，如果Linux没有了文件，那他就不叫Linux了，有了文件，我们的计算机才能够正常运行，有了文件我们才能够在计算机上写东西并能够帮我们保存下来。 C语言也提供了一系列的函数来操控文件，本篇文章只介绍那些常见和常用...","link":"","photos":[],"count_time":{"symbolsCount":"9.8k","symbolsTime":"9 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"C语言一个特殊的数组【柔性数组】","uid":"c624797c7b313fdd30471a2503f8d11d","slug":"C语言一个特殊的数组【柔性数组】","date":"2023-02-18T06:29:28.000Z","updated":"2023-02-18T06:30:24.629Z","comments":true,"path":"api/articles/C语言一个特殊的数组【柔性数组】.json","keywords":null,"cover":"/photo/OIP-C.jpeg","text":"前言 也许你从来就没有听过柔性数组（flexible array）这个概念，但他是真的存在； 柔性数组的概念存在于C99标准当中，C99标准表示：结构体的最后一个成员可以是一个大小不确定的数组，这个数组就叫做柔性数组; 既然搭配了柔性这一修饰词，那么这个数组就不会是”耿直“的了。...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"关于C语言atoi函数的解析使用与自我实现","uid":"81fc7805ca264e2858b2ea302671831d","slug":"关于C语言atoi函数的解析使用与自我实现","date":"2023-02-18T06:24:52.000Z","updated":"2023-02-18T06:26:42.649Z","comments":true,"path":"api/articles/关于C语言atoi函数的解析使用与自我实现.json","keywords":null,"cover":"/photo/202322.jpg","text":"前言 对于atoi函数大家可能会有些陌生，不过当你选择并阅读到这里时，请往下阅读，我相信你能对atoi函数熟悉 该函数的头文件为 &lt;stdlib.h&gt; 或 &lt;cstdlib&gt; atoi函数的介绍此函数的功能是将数字字符的字符串转化为字面上的整型返回，例如：...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"关于C语言非常重要的动态内存管理函数的解析和使用","uid":"a34c5dd4aef1e7a0fbf034a166eaf417","slug":"关于C语言非常重要的动态内存管理函数的解析和使用","date":"2023-02-18T06:14:44.000Z","updated":"2023-03-03T16:13:18.254Z","comments":true,"path":"api/articles/关于C语言非常重要的动态内存管理函数的解析和使用.json","keywords":null,"cover":"/photo/屏幕截图_20230122_041251.png","text":"前言 动态内存管理函数可以说很好用，但是有些小危险。 所谓动态内存分配，就是指在程序执行的过程中动态地分配或者回收存储空间的分配内存的方法。 动态内存分配不像 数组 等 静态内存 分配方法那样需要预先分配存储空间，而是由系统根据程序的需要即时分配，且分配的大小就是程序要求的大小。...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}},"feature":null},{"title":"关于C语言自定义类型的解析【联合体(共用体)】","uid":"77f0175d7a55a3daaea7f2a65478b692","slug":"关于C语言自定义类型的解析【联合体-共用体-】","date":"2023-02-18T06:10:00.000Z","updated":"2023-02-18T06:12:40.980Z","comments":true,"path":"api/articles/关于C语言自定义类型的解析【联合体-共用体-】.json","keywords":null,"cover":"/photo/屏幕截图_20230122_043346.png","text":"前言 联合体（union）在C语言中是不常用的，不过存在就必然有其有用之处，这里不深入探讨联合体用在何处有什么用，本文章只介绍关于union的基本知识。 联合体(UNION)类型的定义 联合体也是一种特殊的自定义类型, 这种类型定义的变量也包含一系列的成员，特征是这些成员共用同一...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"关于C语言自定义类型的解析【枚举】","uid":"2a6f3763c677ea77f93b81ce5ed42b63","slug":"关于C语言自定义类型的解析【枚举】","date":"2023-02-18T06:03:06.000Z","updated":"2023-02-18T06:09:30.560Z","comments":true,"path":"api/articles/关于C语言自定义类型的解析【枚举】.json","keywords":null,"cover":"/photo/屏幕截图_20230122_044410.png","text":"前言 枚举在我们平时练习或学习的时候可能不是很常用，但是其在工程项目里，还是比较常见的，因为他能起到优化用。并且，有时我们在写题的时候，也会运用到枚举的思想。 枚举的介绍 枚举顾名思义就是 一 一 列举。把可能的取值 一 一 列举。 比如我们现实生活中：1.一个星期从星期一到星期...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"关于C语言自定义类型的解析【结构体】","uid":"4134eec542bd62238a7d449186ff9c26","slug":"关于C语言自定义类型的解析【结构体】","date":"2023-02-18T04:17:55.000Z","updated":"2023-02-18T04:21:27.872Z","comments":true,"path":"api/articles/关于C语言自定义类型的解析【结构体】.json","keywords":null,"cover":"/photo/屏幕截图_20230122_043921.png","text":"前言 C语言中结构体是一种用户自定义的数据类型，它相当于一个小型的数据结构，当我们在学数据结构阶段的时候，结构体的运用很常见，所以，基本的结构体的定义和使用，以及结构体大小的计算务必掌握。 结构体类型的声明 结构体的基础知识： 结构是一些值的集合，这些值称为成员变量。结构的每个成...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"C语言常用内存函数的深度解析与自我实现","uid":"f270be882af30c8038e39539db2e9228","slug":"C语言常用内存函数的深度解析与自我实现","date":"2023-02-18T04:05:03.000Z","updated":"2023-03-03T16:13:37.250Z","comments":true,"path":"api/articles/C语言常用内存函数的深度解析与自我实现.json","keywords":null,"cover":"/photo/R-C.jpeg","text":"前言 内存函数的使用广泛度大于常用字符串函数的使用广泛度，因为字符串函数只适用于与字符相关的，而内存函数适用于各个类型，因为他是从内存出发，对内存进行修改，因此，学会内存函数，可谓收获满满呀。 这些内存函数的头文件是&lt;string.h&gt; memcpy 该函数的功能是内...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}},"feature":null},{"title":"C语言常见字符串函数的解析和部分字符串函数的实现","uid":"19cad4ee9072e8ab86cabc2b83a8e850","slug":"C语言常见字符串函数的解析和部分字符串函数的实现","date":"2023-02-18T04:01:12.000Z","updated":"2023-02-18T04:03:06.381Z","comments":true,"path":"api/articles/C语言常见字符串函数的解析和部分字符串函数的实现.json","keywords":null,"cover":"/photo/p55.jpeg","text":"前言 常见的字符串函数在一定程度上可以让我们在写代码，或者是在刷某些有关字符串的题目时事半功倍，并且常见字符串函数的功能非常常用，因此我们应该熟练使用这些字符串函数，以及部分函数要能自我实现。 字符串函数都要引入一个库函数：string(#include &lt;string.h...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"GO语言基本数据类型","uid":"43e2ee3df951b9743f1edd51428d3b1f","slug":"GO语言基本数据类型","date":"2023-02-18T03:54:57.000Z","updated":"2023-02-18T03:56:21.159Z","comments":true,"path":"api/articles/GO语言基本数据类型.json","keywords":null,"cover":"/photo/p7.jpg","text":"1.整数类型 整数类型就是存放整数的，如18 ，-18，123534等，在GO语言中，几乎不同于其它语言，以字节的视角来看其int类型还分为不同的int表达，首先int还要分为两大类。 1.1.有符号整数类型 有符号就是整数有正负之分 我们来看下图：可以看到，这4个int后面都带...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"GO语言相关知识的深度解析","slug":"GO语言相关知识的深度解析","count":1,"path":"api/categories/GO语言相关知识的深度解析.json"}],"tags":[{"name":"GO语言","slug":"GO语言","count":1,"path":"api/tags/GO语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"深度解析数据在内存中的存储","uid":"daac20e59d5dd80457865681aac90392","slug":"深度解析数据在内存中的存储","date":"2023-02-18T03:46:23.000Z","updated":"2023-02-18T03:49:26.069Z","comments":true,"path":"api/articles/深度解析数据在内存中的存储.json","keywords":null,"cover":"/photo/p5.jpeg","text":"1. 数据类型详细介绍 char // 字符数据类型short // 短整型int // 整型 long // 长整型long long // 更长的整型float // 单精度浮点数double // 双精度浮点数 1.1.类型的基本归类1.整型家族char unsigned ...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"C语言指针练级攻略进阶级","uid":"2e8c8f6bc22dd0fcb7353812a2e08717","slug":"C语言指针练级攻略进阶级","date":"2023-02-17T16:04:46.000Z","updated":"2023-02-18T02:58:23.713Z","comments":true,"path":"api/articles/C语言指针练级攻略进阶级.json","keywords":null,"cover":"/photo/p4.png","text":"1. 字符指针 字符指针顾名思义是指向字符的指针，如 char* p &#x3D; a(字符数组)。 如下：char a[] &#x3D; “abcdef”;char* p1 &#x3D; a;char* p2 &#x3D; “abcdef”; p1是一个字符指针，它指向的是a字...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"程序员最需要的技术-调试（代码均C语言为例）","uid":"d7ca3649cd79eeb226e0042c9923bb21","slug":"程序员最需要的技术-调试（代码均C语言为例）","date":"2023-02-17T15:35:31.000Z","updated":"2023-02-18T02:58:19.982Z","comments":true,"path":"api/articles/程序员最需要的技术-调试（代码均C语言为例）.json","keywords":null,"cover":"/photo/p1.png","text":"世界上第一个bug 第一次被发现的导致计算机错误的飞蛾，也是第一个计算机程序错误。 这只飞蛾就引生出了bug的概念。 bug是在应用程序投入生产之前发现的错误。 导致程序工作不佳、生产错误结果或崩溃的编程错误。 1.学会调试很重要1.1 调试是什么？ 调试（英语：Debuggin...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"C语言指针练级攻略初级篇（2）","uid":"96e78203404f7982dd071e85a86cfcc4","slug":"C语言指针练级攻略初级篇（2）","date":"2023-02-17T15:32:59.000Z","updated":"2023-02-18T02:58:28.168Z","comments":true,"path":"api/articles/C语言指针练级攻略初级篇（2）.json","keywords":null,"cover":[],"text":"前言 紧跟上一章，这一章的指针相对较难一些，不过经过本章的学习，相信大家能够有所得 一.二级指针 上一章说的都是一级指针的应用，那么什么是二级指针呢？ 我们都知道，创建一个变量是需要在内存中开辟一个地址空间来存放的，那么指针（指针就是指针变量）也是如此，他也是一个变量，他也需要一...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"C语言指针练级攻略初级篇（1）","uid":"2aa79aad05ade9ad90a236a03dfb831e","slug":"C语言指针练级攻略初级篇（1）","date":"2023-02-17T15:30:00.000Z","updated":"2023-02-18T02:58:35.316Z","comments":true,"path":"api/articles/C语言指针练级攻略初级篇（1）.json","keywords":null,"cover":[],"text":"前言 C语言中指针可以说是最接近计算机的一种表达方式了，他是C语言中最难也最重要的一块，这就需要我们细心去学去体会指针的每一步效果，相信大家刚学指针时会有些许困惑，本章我们就来看看指针的初阶把。 1.指针是什么？ 指针是一个值为内存地址的变量； 指针提供一种以符号的形式使用地址的...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"关于C语言常见操作符的解析和使用","uid":"dafd374449017f7aa00611ca0f3662e1","slug":"关于C语言常见操作符的解析和使用","date":"2023-02-17T14:40:44.000Z","updated":"2023-02-18T02:58:05.144Z","comments":true,"path":"api/articles/关于C语言常见操作符的解析和使用.json","keywords":null,"cover":[],"text":"前言 我们在学习C语言时肯定会用到不同的操作符来完成我们的功能，本章便是这些操作符的介绍与具体使用。 1. 算数操作符 算数操作符有四种，他们分别为： 加 “**+”，减 “-”，乘 “ * ”，除 “&#x2F;”， 取模 “%**” 值得注意的是,在C语言中乘号用 “ * “...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"一文带你灵活使用C语言的数组","uid":"b82bfb4a02f130e6ce0f96366fdc8a1f","slug":"一文带你灵活使用C语言的数组","date":"2023-02-17T14:38:44.000Z","updated":"2023-02-18T02:57:53.229Z","comments":true,"path":"api/articles/一文带你灵活使用C语言的数组.json","keywords":null,"cover":[],"text":"一. 什么是数组？ 数组是由数据类型相同的一系列元素组成的。需要使用数组时，通过声明数组告诉编译器数组中内含多少元素和这些元素的类型。编译器根据这些信息正确的创建数组。普通变量可以使用的类型，数组元素都可以使用。 二. 一维数组1. 一维数组的创建和初始化1.1. 一维数组的创建...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"使用C语言实现初级扫雷小游戏","uid":"fc86da1651adc032c38c6b773ee69698","slug":"使用C语言实现初级扫雷小游戏","date":"2023-02-17T14:37:11.000Z","updated":"2023-02-18T02:58:01.288Z","comments":true,"path":"api/articles/使用C语言实现初级扫雷小游戏.json","keywords":null,"cover":"/photo/p3.png","text":"一. 前言 本章我们用C语言简单实现一个9×9雷阵的扫雷小游戏。 说到扫雷想必大家都不陌生，开始我们点击一个小方块，那么这个小方块上会显示它周围八个小方块里雷的个数，凭借这个数值，在判断下一个要扫的位置（当然可能前面两步需要我们的幸运成分了），当我们除雷外的所有小方块都已经显示完...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"C语言的分支与循环#熟练使用，出手就有#","uid":"e0b663ff8593ec90044339189f2bc842","slug":"C语言的分支与循环-熟练使用，出手就有","date":"2023-02-17T14:08:48.000Z","updated":"2023-02-18T02:58:41.363Z","comments":true,"path":"api/articles/C语言的分支与循环-熟练使用，出手就有.json","keywords":null,"cover":[],"text":"一. 前言 分支和循环在C语言中几乎无处不在，作为重要的一部分，精确掌握其语法和运用逻辑，是继续向下学习的“地基”。 二. 分支语句1. if 分支语句if 就是如果，如果怎么怎么样就干嘛干嘛，在C语言中，其表达效果也是如此。 if (表达式) &#x2F;&#x2F; 表达式为...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"C语言实现初级三子棋","uid":"d5a6879e81b57b97e13538ee2b9c1dd3","slug":"C语言实现初级三子棋","date":"2023-02-17T14:07:06.000Z","updated":"2023-02-18T02:58:32.307Z","comments":true,"path":"api/articles/C语言实现初级三子棋.json","keywords":null,"cover":"/photo/p2.png","text":"一. 前言 本章我们用C语言来实现一个初级的三子棋小游戏，三子棋想必大家都玩过，只要每一行或每一列或对角线三个棋相同，那么便获得胜利，由此我们分析下棋的步骤与获胜判断，来构建一个C语言三子棋的代码框架。 游戏实现我们分装两个 .c （代码主函数与函数定义源代码）后缀的文件和一个 ...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},{"title":"C语言函数篇（全）","uid":"a49297b33fb7686d3c6c056b10f0d94d","slug":"C语言函数篇（全）","date":"2023-02-17T14:04:16.000Z","updated":"2023-02-18T02:58:38.223Z","comments":true,"path":"api/articles/C语言函数篇（全）.json","keywords":null,"cover":[],"text":"一.前言本章为个人所学所理解的C语言中函数篇的相关知识，定有不足，还望大家多多指教。 二.什么是函数？函数是一段可以重复使用的代码，用来独立地完成某个功能。 三.函数的分类：函数可以分为库函数和自定义函数。 1.库函数 在说库函数之前，先给大家推荐一个网站，这个网站可以搜索到所有...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}}],"categories":4,"tags":31,"word_count":"242k","post_count":31}