{"title":"C语言的分支与循环#熟练使用，出手就有#","uid":"e0b663ff8593ec90044339189f2bc842","slug":"C语言的分支与循环-熟练使用，出手就有","date":"2023-02-17T14:08:48.000Z","updated":"2023-02-18T02:58:41.363Z","comments":true,"path":"api/articles/C语言的分支与循环-熟练使用，出手就有.json","keywords":null,"cover":[],"content":"<h1 id=\"一-前言\"><a href=\"#一-前言\" class=\"headerlink\" title=\"一. 前言\"></a>一. 前言</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>分支和循环在C语言中几乎无处不在，作为重要的一部分，精确掌握其语法和运用逻辑，是继续向下学习的“地基”。</p></blockquote>\n<h1 id=\"二-分支语句\"><a href=\"#二-分支语句\" class=\"headerlink\" title=\"二. 分支语句\"></a>二. 分支语句</h1><h2 id=\"1-if-分支语句\"><a href=\"#1-if-分支语句\" class=\"headerlink\" title=\"1. if 分支语句\"></a>1. if 分支语句</h2><p>if 就是如果，如果怎么怎么样就干嘛干嘛，在C语言中，其表达效果也是如此。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">if (表达式)   &#x2F;&#x2F; 表达式为真执行if语句块，随后下面的分支语句都不判断执行，如果为假，判断下一个else if的表达式\n&#123;\n\t语句;\n&#125;\nelse if(表达式)  &#x2F;&#x2F; 这里的表达式只有if中的表达式为假才会判断其真假，如果为真，执行其语句块并不在判断执行下面的分支，为假则继续向下判断\n&#123;\n    语句;\n&#125;\nelse &#x2F;&#x2F; 如果前面分支的表达式都为假，执行else语句块\n&#123;\n    语句;\n&#125;</code></pre>\n\n\n\n<ul>\n<li>值得注意的是，if后面如果只跟一条语句的话是可以不用打大括号的，不过最好是要打大括号，以免出现不必要的错误，并且，如果不打括号，那么后面的else就会与最近的if匹配，这样很可能造成bug。</li>\n</ul>\n<p>例如：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int main()\n&#123;\n\tint n &#x3D; 0;\n\tscanf(&quot;%d&quot;, &amp;n);  \n\n\tif (n &lt;&#x3D; 10)\n\t\tif (n % 2 &#x3D;&#x3D; 0)\n\t\t\tprintf(&quot;hehe\\n&quot;);\n\telse\n\t\tprintf(&quot;haha\\n&quot;);\n\n\treturn 0;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果这里我们输入12，按语法逻辑来说程序一走屏幕上应该是打印 “haha” ，但是，由于没有大括号，那条在格式上是与第一个if对齐的else语句实际上是与离他最近的那个if对齐，而第二个if在第一个if语句之下，所以将不会打印“haha”。<img src=\"https://img-blog.csdnimg.cn/f837ec52848e4c5cac807bea23fa47fb.png#pic_center\" alt=\"在这里插入图片描述\"></p></blockquote>\n<p>所以我们一定要养成打大括号的好习惯！</p>\n<h2 id=\"2-switch—case-语句\"><a href=\"#2-switch—case-语句\" class=\"headerlink\" title=\"2. switch—case 语句\"></a>2. switch—case 语句</h2><p>这里先用段代码来阐明它的基本表达形式：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">swtich(表达式)\n&#123;\n\tcase 常量表达式:\n\t    执行语句;\n\t\tbreak;\n\tcase 常量表达式:\n\t    执行语句;\n\t\tbreak:\n    ......\n\tdefault:\n\t    执行语句;\n\t\tbreak:\n&#125;</code></pre>\n<ul>\n<li><p>（1） switch 后面括号内的“表达式”必须是整数类型。也就是说可以是 int 型变量、char 型变量，也可以直接是整数或字符常量，哪怕是负数都可以。但绝对不可以是float 型变量、double 型变量、小数常量通通不行，全部都是语法错误。</p>\n</li>\n<li><p>（2）观察上段代码，case后面跟的都是常量表达式，如果switch后面的表达式与某个case后面的常量表达式相同，那么将会执行这个case后面的语句，我们可以看到，每个case分支后面都跟了个break，这是为什么呢？</p>\n</li>\n</ul>\n<p>我们看看下面这段代码：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;  1-5 为工作日 6 7 为休息日\n#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint n &#x3D; 0;\n\tscanf(&quot;%d&quot;, &amp;n);\n\n\tswitch (n)\n\t&#123;\n\tcase 1:\n\t\tprintf(&quot;工作日\\n&quot;);\n\tcase 2:\n\t\tprintf(&quot;工作日\\n&quot;);\n\tcase 3:\n\t\tprintf(&quot;工作日\\n&quot;);\n\tcase 4:\n\t\tprintf(&quot;工作日\\n&quot;);\n\tcase 5:\n\t\tprintf(&quot;工作日\\n&quot;);\n\tcase 6:\n\t\tprintf(&quot;休息日\\n&quot;);\n\tcase 7:\n\t\tprintf(&quot;休息日\\n&quot;);\n\tdefault:\n\t\tprintf(&quot;输入错误\\n&quot;);\n\t&#125;\n\n\treturn 0;\n&#125;</code></pre>\n<p>从上面说的来看理论上我们运行程序输入1会打印 “工作日”，但实际上却不是如此：<br><img src=\"https://img-blog.csdnimg.cn/469b11bb56a142659a11de56ef2a8fa9.png#pic_center\" alt=\"在这里插入图片描述\"><br>当我们输入2时：<br><img src=\"https://img-blog.csdnimg.cn/d93902ae0b3a4c9aabde8487d458111b.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>由上面的运行结果来看，我们很容易推出，如果case后面没有break，当我们执行一个case，后面的case都会依次被执行，那么我们现在加入break来看看：<br><img src=\"https://img-blog.csdnimg.cn/ca4c5174224c427fb2fe5bd796441c31.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/997c77943c914056b752aa40d79ce6b0.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>很明显，加入break后，每当执行一个case语句，后面的case便不会在执行，这里我们就清楚了break在switch语句中的作用：那就是停止执行下一个case，跳出switch分支语句。既然break有如此作用，那么上述代码case1-5和case6-7的重复是不是就写麻烦了，为此做出以下改进：</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint n &#x3D; 0;\n\tscanf(&quot;%d&quot;, &amp;n);\n\n\tswitch (n)\n\t&#123;\n\tcase 1:\n\tcase 2:\n\tcase 3:\n\tcase 4:\n\tcase 5:\n\t\tprintf(&quot;工作日\\n&quot;);\n\t\tbreak;\n\tcase 6:\n\tcase 7:\n\t\tprintf(&quot;休息日\\n&quot;);\n\t\tbreak;\n\tdefault:\n\t\tprintf(&quot;输入错误\\n&quot;);\n\t\tbreak;\n\t&#125;\n\n\treturn 0;\n&#125;</code></pre>\n\n\n<p>运行结果如下：<br><img src=\"https://img-blog.csdnimg.cn/1e72d62c811e421cab0948e7330e89b5.png#pic_center\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/1ff88cc81d5644f99eddfb6a975d06b5.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>这样的运行结果与每个case后面都加语句和break的运行结果相同，并且代码变得更加简洁了，这是运用了case的性质和break的作用，所以当我们有很多重复项时，用switch—case语句是很好的选择。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们可以看到，代码里头还有一个 default：它的意思是，如果所有的case都没法执行，那么就执行default 后面的语句，当然，default可以放在switch里的任何一个位置，这是不影响的，别问为啥，语法规定可以哈哈哈哈哈。</p></blockquote>\n<h1 id=\"三-循环语句-while-do-while-for\"><a href=\"#三-循环语句-while-do-while-for\" class=\"headerlink\" title=\"三 . 循环语句(while,  do-while,  for)\"></a>三 . 循环语句(while,  do-while,  for)</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>循环顾名思义就是重复的做某事，C语言中也是如此，这三种循环大同小异，都存在判断表达式与循环体。</p></blockquote>\n<h2 id=\"1-while-循环\"><a href=\"#1-while-循环\" class=\"headerlink\" title=\"1. while 循环\"></a>1. while 循环</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">while (判断表达式)\n&#123;\n\t语句块;\n&#125;</code></pre>\n\n\n<ul>\n<li>如上，如果判断表达式为真，那么就做while里头的代码块，如果判断表达式为假，则while循环不会执行。当判断表达式一直为真时，那么将会重复执行其里面的代码，这时程序会一直运行不停止，所以，在while循环里头，我们要插入能达到我们目的的并且n次循环后能使判断表达式为假的代码，这样，while循环才会在达到我们想要的效果的同时终止循环。</li>\n</ul>\n<h2 id=\"2-do-while-循环\"><a href=\"#2-do-while-循环\" class=\"headerlink\" title=\"2. do-while 循环\"></a>2. do-while 循环</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">do  &#x2F;&#x2F; do 就是无论如何先执行一次do大括号里的代码块的语句\n&#123;\n\t代码块;\n&#125; while (判断表达式);  &#x2F;&#x2F; 这里的判断 等do做完后在执行</code></pre>\n<ul>\n<li>实际上，do-while 循环与 while 循环的差别就在与 do-while 循环是无论如何先执行一遍大括号里的代码语句再进行判断表达式，而 while 是直接判断表达式是否为真，再决定要不要执行大括号里的语句。</li>\n<li>要注意的是，do-while 循环的 while 后面是要加 ”;“ 号的，他表示一个语句的结束标志。</li>\n</ul>\n<h2 id=\"3-for-循环\"><a href=\"#3-for-循环\" class=\"headerlink\" title=\"3. for 循环\"></a>3. for 循环</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">for (表达式1; 表达式2; 表达式3)\n&#123;\n\t语句块;\n&#125;\n&#x2F;&#x2F;&#x2F;&#x2F;  表达式1 ：初始化表达式\n&#x2F;&#x2F;&#x2F;&#x2F;  表达式2 ：判断控制表达式\n&#x2F;&#x2F;&#x2F;&#x2F;  表达式3 ：调节器</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/9e4ff7d83dd949c5892029ef19b9c25a.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>for 循环是将初始化，判断控制表达式，调节功能表达式集为一体的循环。这也是他与while，do-while 循环最大的不同。这也使他运用起来更方便更简洁，所以我认为，for 循环是所有循环里的首选。</li>\n</ul>\n<h2 id=\"4-比较-（输出1-10的和）\"><a href=\"#4-比较-（输出1-10的和）\" class=\"headerlink\" title=\"4. 比较 （输出1-10的和）\"></a>4. 比较 （输出1-10的和）</h2><p>while：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint i &#x3D; 1;\n\tint sum &#x3D; 0;\n\n\twhile (i &lt;&#x3D; 10)\n\t&#123;\n\t\tsum +&#x3D; i;\n\t\ti++;\n\t&#125;\n\n\tprintf(&quot;%d&quot;, sum);\n\n\treturn 0;\n&#125;</code></pre>\n<p>do-while：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint i &#x3D; 1;\n\tint sum &#x3D; 0;\n\n\tdo\n\t&#123;\n\t\tsum +&#x3D; i;\n\t\ti++;\n\t&#125; while (i &lt;&#x3D; 10);\n\n\tprintf(&quot;%d&quot;, sum);\n\n\treturn 0;\n&#125;</code></pre>\n<p>for：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint sum &#x3D; 0;\n\n\tfor (int i &#x3D; 1; i &lt;&#x3D; 10; i++)\n\t&#123;\n\t\tsum +&#x3D; i;\n\t&#125;\n\n\tprintf(&quot;%d&quot;, sum);\n\n\treturn 0;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>三段代码的执行结果是一样的，但其书写形式却不同，我们可以看到，for循环相对于其它两个循环是最简明的。在某些环境中，while与for可以互相换着用（推荐使用for），而在不同情况下，还要具体问题具体分析，但绝大多数用for循环都可以解决，而 do-while 由于他的特殊性只在某些特定的场景才使用。</p></blockquote>\n<h1 id=\"四-break-与-continue-的作用\"><a href=\"#四-break-与-continue-的作用\" class=\"headerlink\" title=\"四. break 与 continue 的作用\"></a>四. break 与 continue 的作用</h1><h2 id=\"1-break\"><a href=\"#1-break\" class=\"headerlink\" title=\"1. break\"></a>1. break</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>break意为停止终止的意思，他在C语言中被广泛使用，很多分支与循环的调控与衔接都需要它来解决。</p></blockquote>\n<h3 id=\"1-1-break-在分支中的作用\"><a href=\"#1-1-break-在分支中的作用\" class=\"headerlink\" title=\"1.1  break 在分支中的作用\"></a>1.1  break 在分支中的作用</h3><ul>\n<li>这里明确指出，break 在 if 分支语句中没有任何作用，他不能跳出 if 语句（语法规定），但是如果在循环里头的 if 分支用 break ，为真程序则跳出（终止）循环。</li>\n<li>switch-case 是 break 的真爱粉，其作用在上面 ↑ 讲解switch时有说到。可以这么说，几乎所有的swtich分支语句都需要break。</li>\n</ul>\n<h3 id=\"1-2-break-在循环里的作用\"><a href=\"#1-2-break-在循环里的作用\" class=\"headerlink\" title=\"1.2 break 在循环里的作用\"></a>1.2 break 在循环里的作用</h3><ul>\n<li>很简单，break 在循环当中的作用就是跳出循环（终止循环的意思）。当你的循环为你达到了某个你需要的结果时你便可以用break跳出循环使循环不在进行。</li>\n</ul>\n<h2 id=\"2-continue\"><a href=\"#2-continue\" class=\"headerlink\" title=\"2. continue\"></a>2. continue</h2><p>continue 可以说只在循环里头起作用，他的作用是，当你在循环里头满足了执行continue的条件，那么continue将会结束本次循环，直接进行下一次循环。实际上continue在程序设计中用的比较少，它的功能局限性太大了。</p>\n<h1 id=\"五-总结\"><a href=\"#五-总结\" class=\"headerlink\" title=\"五. 总结\"></a>五. 总结</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>分支与循环的语法虽然简单，但它在实际运用中确实烧脑的存在，今后几乎所有你会遇到的问题，他都需要分支与循环来逻辑实现。因此，分支与循环我们不仅要学会，还要练透，并且能十分清楚他的逻辑。</p></blockquote>\n","text":"一. 前言 分支和循环在C语言中几乎无处不在，作为重要的一部分，精确掌握其语法和运用逻辑，是继续向下学习的“地基”。 二. 分支语句1. if 分支语句if 就是如果，如果怎么怎么样就干嘛干嘛，在C语言中，其表达效果也是如此。 if (表达式) &#x2F;&#x2F; 表达式为...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":13,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":13,"path":"api/tags/C语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80-%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">一. 前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C-%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">二. 分支语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-if-%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">1. if 分支语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-switch%E2%80%94case-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">2. switch—case 语句</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5-while-do-while-for\"><span class=\"toc-text\">三 . 循环语句(while,  do-while,  for)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-while-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">1. while 循环</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-do-while-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">2. do-while 循环</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-for-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">3. for 循环</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E6%AF%94%E8%BE%83-%EF%BC%88%E8%BE%93%E5%87%BA1-10%E7%9A%84%E5%92%8C%EF%BC%89\"><span class=\"toc-text\">4. 比较 （输出1-10的和）</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B-break-%E4%B8%8E-continue-%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">四. break 与 continue 的作用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-break\"><span class=\"toc-text\">1. break</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-break-%E5%9C%A8%E5%88%86%E6%94%AF%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">1.1  break 在分支中的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-break-%E5%9C%A8%E5%BE%AA%E7%8E%AF%E9%87%8C%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">1.2 break 在循环里的作用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-continue\"><span class=\"toc-text\">2. continue</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%94-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">五. 总结</span></a></li></ol>","author":{"name":"坏 幸 运","slug":"blog-author","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.0bab160015bf9e56450d5fded33bd448?rik=VFMstq3mAZG1pg&riu=http%3a%2f%2fwww.qzqn8.com%2fwp-content%2fuploads%2f2020%2f02%2f3-9.jpg&ehk=pnkhUlGCDYmxisEuCwYL4zXW92froAxt%2f0B5i9AYAkY%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"使用C语言实现初级扫雷小游戏","uid":"fc86da1651adc032c38c6b773ee69698","slug":"使用C语言实现初级扫雷小游戏","date":"2023-02-17T14:37:11.000Z","updated":"2023-02-18T02:58:01.288Z","comments":true,"path":"api/articles/使用C语言实现初级扫雷小游戏.json","keywords":null,"cover":"/photo/p3.png","text":"一. 前言 本章我们用C语言简单实现一个9×9雷阵的扫雷小游戏。 说到扫雷想必大家都不陌生，开始我们点击一个小方块，那么这个小方块上会显示它周围八个小方块里雷的个数，凭借这个数值，在判断下一个要扫的位置（当然可能前面两步需要我们的幸运成分了），当我们除雷外的所有小方块都已经显示完...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":13,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":13,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.0bab160015bf9e56450d5fded33bd448?rik=VFMstq3mAZG1pg&riu=http%3a%2f%2fwww.qzqn8.com%2fwp-content%2fuploads%2f2020%2f02%2f3-9.jpg&ehk=pnkhUlGCDYmxisEuCwYL4zXW92froAxt%2f0B5i9AYAkY%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},"next_post":{"title":"C语言实现初级三子棋","uid":"d5a6879e81b57b97e13538ee2b9c1dd3","slug":"C语言实现初级三子棋","date":"2023-02-17T14:07:06.000Z","updated":"2023-02-18T02:58:32.307Z","comments":true,"path":"api/articles/C语言实现初级三子棋.json","keywords":null,"cover":"/photo/p2.png","text":"一. 前言 本章我们用C语言来实现一个初级的三子棋小游戏，三子棋想必大家都玩过，只要每一行或每一列或对角线三个棋相同，那么便获得胜利，由此我们分析下棋的步骤与获胜判断，来构建一个C语言三子棋的代码框架。 游戏实现我们分装两个 .c （代码主函数与函数定义源代码）后缀的文件和一个 ...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":13,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":13,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.0bab160015bf9e56450d5fded33bd448?rik=VFMstq3mAZG1pg&riu=http%3a%2f%2fwww.qzqn8.com%2fwp-content%2fuploads%2f2020%2f02%2f3-9.jpg&ehk=pnkhUlGCDYmxisEuCwYL4zXW92froAxt%2f0B5i9AYAkY%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}}}