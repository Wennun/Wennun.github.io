{"title":"C语言指针练级攻略初级篇（1）","uid":"2aa79aad05ade9ad90a236a03dfb831e","slug":"C语言指针练级攻略初级篇（1）","date":"2023-02-17T15:30:00.000Z","updated":"2023-02-18T02:58:35.316Z","comments":true,"path":"api/articles/C语言指针练级攻略初级篇（1）.json","keywords":null,"cover":[],"content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>C语言中指针可以说是最接近计算机的一种表达方式了，他是C语言中最难也最重要的一块，这就需要我们细心去学去体会指针的每一步效果，相信大家刚学指针时会有些许困惑，本章我们就来看看指针的初阶把。</li>\n</ul></blockquote>\n<h1 id=\"1-指针是什么？\"><a href=\"#1-指针是什么？\" class=\"headerlink\" title=\"1.指针是什么？\"></a>1.指针是什么？</h1><ul>\n<li>指针是一个值为内存地址的变量；</li>\n<li>指针提供一种以符号的形式使用地址的方法。因为计算机的硬件指令非常依赖地址，指针在某种程度上把程序员想要传达的指令以更接近机器的方式表达。因此，使用指针的程序更有效率。</li>\n<li>通俗来说，指针就是指针变量，他能存放一个地址。也可以说，指针就是地址。</li>\n</ul>\n<h1 id=\"2-指针和指针类型\"><a href=\"#2-指针和指针类型\" class=\"headerlink\" title=\"2.指针和指针类型\"></a>2.指针和指针类型</h1><ul>\n<li>首先我们得知道，内存中的地址是连续存放的，每一个内存单元占一个字节。在32位机器中，有32跟地址线，也就是说，cpu的寻址能力为2的32次方个地址，64为机器与32位机器大同小异，只不过64位的寻址能力更强了。</li>\n<li>由于32位机器每一次的寻址为32个比特位，也就是4个字节，所以指针变量的大小为4个字节。也就是说，在32位机器中，无论一个指针变量为何种类型，他的大小都是4个字节。在64位当中我们也很容易就可以推出，指针变量的大小为8个字节，这是基于机器来确定的。</li>\n</ul>\n<p>下面基于64位系统看看上述效果：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint a &#x3D; 10;\n\tint* a1 &#x3D; &amp;a;\n\tchar* a2 &#x3D; (char*) &amp; a;\n\tshort* a3 &#x3D; (short*) &amp; a;\n\n\tprintf(&quot;%zd\\n&quot;, sizeof(a1));\n\tprintf(&quot;%zd\\n&quot;, sizeof(a2));\n\tprintf(&quot;%zd\\n&quot;, sizeof(a3));\n\n\treturn 0;\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/62a7a93176684e4c99afaebab621683b.png#pic_center\" alt=\"在这里插入图片描述\"><br>很明显，在64位系统中，何种类型的指针他的大小都是8个字节。</p>\n<h2 id=\"2-1-声明指针\"><a href=\"#2-1-声明指针\" class=\"headerlink\" title=\"2.1.声明指针\"></a>2.1.声明指针</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int a &#x3D; 10;\nint* pa &#x3D; &amp;a;</code></pre>\n<ul>\n<li>a的值为10，&amp;a为a的地址；</li>\n<li>int* pa表示pa是一个指针变量，int*表示pa是一个整型的指针变量；</li>\n<li>经过上述操作，pa里面存放了a的地址；</li>\n<li>这样我们便声明了一个指向a地址的指针变量pa。</li>\n</ul>\n<p>我们分别将a的地址和pa打印出来，可以发现两个地址是一样的：<br><img src=\"https://img-blog.csdnimg.cn/9c3f288cf9ec423cbaf467a36bfc8531.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2-2-指针类型\"><a href=\"#2-2-指针类型\" class=\"headerlink\" title=\"2.2.指针类型\"></a>2.2.指针类型</h2><ul>\n<li>指针类型有int等类型，与定义一个变量使用的类型相同，那么指针类型对指针有什么作用呢？<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>指针的类型决定了指针向前或者向后走一步有多大；</li>\n<li>比如一个int类型的指针，int的大小为4个字节，当指针加一时，指针在内存中跳过4个字节；</li>\n<li>同样的，一个char类型的指针，char的大小为1个字节，当指针加一时，指针在内存中跳过1个字节；</li>\n<li>总的来说，指针的类型提供了一个指针在内存中移动的视角，理解指针的类型可以使我们更精确的使用指针来改变某个值。</li>\n</ul></blockquote>\n</li>\n</ul>\n<p>例如：我们用一个char类型的指针来修改int类型数组里面的值</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint arr[5] &#x3D; &#123; 1,2,3,4,5 &#125;;\n\tchar* parr &#x3D; (char*)arr;\n\tint i &#x3D; 0;\n\n\tfor (i &#x3D; 0; i &lt; 8; i++)\n\t&#123;\n\t\t*(parr + i) &#x3D; 0;\n\t&#125;\n\n\tfor (i &#x3D; 0; i &lt; 5; i++)\n\t&#123;\n\t\tprintf(&quot;%d &quot;, arr[i]);\n\t&#125;\n\n\treturn 0;\n&#125;</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>运行结果：0 0 3 4 5</p></blockquote>\n<ul>\n<li>我们可以看到，数组arr的前面两个元素被改成了0，这是因为：parr是一个指向arr的char类型的指针，每当parr + 1时，指向arr首元素的地址跳一个字节，也就是说移动一个内存单元，而arr是一个整型的数组，它里面每个元素占四个字节，所以当parr移动7次后他才指向arr第三个元素的地址，当然，arr前面的两个元素被改为0。</li>\n<li>想要更明确的看到类型指针的作用，建议大家运用调试并查看内存的方法，这样效果会更加的明显，更能加深对指针类型的理解。</li>\n</ul>\n<h1 id=\"3-野指针\"><a href=\"#3-野指针\" class=\"headerlink\" title=\"3.野指针\"></a>3.野指针</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>野指针就是指针指向的位置是不可知的（随机的、不正确的、没有明确限制的）</li>\n</ul></blockquote>\n<h2 id=\"3-1-野指针的成因\"><a href=\"#3-1-野指针的成因\" class=\"headerlink\" title=\"3.1.野指针的成因\"></a>3.1.野指针的成因</h2><h3 id=\"3-1-1-指针未初始化\"><a href=\"#3-1-1-指针未初始化\" class=\"headerlink\" title=\"3.1.1.指针未初始化\"></a>3.1.1.指针未初始化</h3><p>例如：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint* p; &#x2F;&#x2F; 这里没有给一个初始地址（局部变量指针未初始化，默认为随机值）\n\t*p &#x3D; 20; &#x2F;&#x2F; 不知道修改了那一块内存\n\n\treturn 0;\n&#125;</code></pre>\n<h3 id=\"3-1-2-指针越界访问\"><a href=\"#3-1-2-指针越界访问\" class=\"headerlink\" title=\"3.1.2.指针越界访问\"></a>3.1.2.指针越界访问</h3><ul>\n<li>指针越界访问的问题一般出现在指针与数组的结合运用当中：</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\nint main()\n&#123;\n    int arr[10] &#x3D; &#123;0&#125;;\n    int *p &#x3D; arr;\n    int i &#x3D; 0;\n    for(i&#x3D;0; i&lt;&#x3D;11; i++)\n   &#123;\n        *(p++) &#x3D; i;\n   &#125;\n    return 0;\n&#125;</code></pre>\n\n<ul>\n<li>当指针指向的范围超出数组arr的范围时，p就是野指针</li>\n</ul>\n<h3 id=\"3-1-3-指针指向的空间释放（不具体展开）\"><a href=\"#3-1-3-指针指向的空间释放（不具体展开）\" class=\"headerlink\" title=\"3.1.3.指针指向的空间释放（不具体展开）\"></a>3.1.3.指针指向的空间释放（不具体展开）</h3><ul>\n<li>解释：当你用指针指向一块空间后，这块空间在程序中中途释放了，而你指向这块空间的指针他还是指向这块空间，其地址没变，只不过说指针指向的这块空间它由原有确定的值变成不确定了，指针也变成了一个悬垂指针。</li>\n</ul>\n<p>这个现象在函数调用时会发生，例如：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint* test()\n&#123;\n\tint a &#x3D; 10;\n\treturn &amp;a;\n&#125;\nint main()\n&#123;\n\tint *p &#x3D; test();\n\n\tprintf(&quot;%d\\n&quot;, *p);\n\n\treturn 0;\n&#125;</code></pre>\n\n<p>这里a的值在函数调用完后就被释放了，也就是说指针变量p最后指向a的那块空间是一个不确定的值。</p>\n<h2 id=\"3-2-如何规避野指针\"><a href=\"#3-2-如何规避野指针\" class=\"headerlink\" title=\"3.2.如何规避野指针\"></a>3.2.如何规避野指针</h2><ol>\n<li>指针初始化</li>\n<li>小心指针越界</li>\n<li>指针指向空间释放，及时置NULL</li>\n<li>避免返回局部变量的地址</li>\n<li>指针使用之前检查有效性</li>\n</ol>\n<h1 id=\"4-指针运算\"><a href=\"#4-指针运算\" class=\"headerlink\" title=\"4.指针运算\"></a>4.指针运算</h1><h2 id=\"4-1-指针-整数\"><a href=\"#4-1-指针-整数\" class=\"headerlink\" title=\"4.1.指针+-整数\"></a>4.1.指针+-整数</h2><ul>\n<li>指针加减整数在数组中有很明显的效果，下面以一段代码来说明：</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\n#define value 5\n\nint main()\n&#123;\n\tint arr[value] &#x3D; &#123; 0 &#125;; &#x2F;&#x2F; arr里有五个元素，全初始化0\n\tint* parr;\n\tint i &#x3D; 0;\n\n\tfor (parr &#x3D; arr; parr &lt; &amp;arr[value]; i++) &#x2F;&#x2F; arr是数组名，为首元素地址，这里先将首元素地址交给指针变量parr\n\t&#123;\n\t\t*parr++ &#x3D; i; &#x2F;&#x2F; 指针从第一个元素开始++找到数组每一个元素的地址并将数组arr里的元素改变；\n\t&#125;\n\n\tfor (i &#x3D; 0; i &lt; value; i++)\n\t&#123;\n\t\tprintf(&quot;%d &quot;, arr[i]); &#x2F;&#x2F; 打印改变后的arr\n\t&#125;\n\n\treturn 0;\n&#125;</code></pre>\n\n\n<h2 id=\"4-2-指针减指针\"><a href=\"#4-2-指针减指针\" class=\"headerlink\" title=\"4.2.指针减指针\"></a>4.2.指针减指针</h2><ul>\n<li>指针减指针的前提是：两个指针要指向同一块空间；</li>\n<li>指针减指针的绝对值得到的是两个指针之间的元素个数。</li>\n</ul>\n<p>例如：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint arr[5] &#x3D; &#123; 1,2,3,4,5 &#125;;\n\tint* parr1 &#x3D; arr;  &#x2F;&#x2F; parr1指向的是arr首元素的地址\n\tint* parr2 &#x3D; &amp;arr[5];  &#x2F;&#x2F; parr2指向的是(arr[4] &#x3D; 5)后面那一个元素的地址\n\n\tint sum &#x3D; parr2 - parr1; &#x2F;&#x2F; parr2 - parr1 得到的是整个arr数组的元素的个数 也是parr2与parr1 之间的元素个数\n\n\tprintf(&quot;%d&quot;, sum); &#x2F;&#x2F; 5\n\t&#x2F;&#x2F;  如果parr2指向的是 &amp;arr[4] 这个地址，那么结果为 4 \n\n\treturn 0;\n&#125;</code></pre>\n\n\n<h2 id=\"4-3-指针的关系运算\"><a href=\"#4-3-指针的关系运算\" class=\"headerlink\" title=\"4.3.指针的关系运算\"></a>4.3.指针的关系运算</h2><p>我们看这两段代码：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint arr[5] &#x3D; &#123; 0 &#125;;\n\tint* parr;\n\n\tfor (parr &#x3D; &amp;arr[5]; parr &gt; arr;)\n\t&#123;\n\t\t*--parr &#x3D; 0;\n\t&#125;\n\n\treturn 0;\n&#125;</code></pre>\n<p>将代码简化后：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint arr[5] &#x3D; &#123; 0 &#125;;\n\tint* parr;\n\n\tfor (parr &#x3D; &amp;arr[4]; parr &gt;&#x3D; arr; parr--)\n\t&#123;\n\t\t*parr &#x3D; 0;\n\t&#125;\n\n\treturn 0;\n&#125;</code></pre>\n<ul>\n<li>我们想象代码的运行过程和结果，第一段代码是用比数组地址大的地址来进行比较，而第二段代码最后是用比数组地址小的地址来进行比较，实际在绝大部分的编译器上是可以顺利完成任务的，然而我们还是应该避免第二种的写法，因为标准并不保证它可行。</li>\n<li>标准规定：允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针比较，但是不允许与指向第一个元素之前的那个内存位置的指针进行比较。</li>\n</ul>\n<h1 id=\"5-指针和数组\"><a href=\"#5-指针和数组\" class=\"headerlink\" title=\"5.指针和数组\"></a>5.指针和数组</h1><p>我们先来看一个例子：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint arr[5] &#x3D; &#123; 1,2,3,4,5 &#125;;\n\tint* p &#x3D; &amp;arr[0];\n\tprintf(&quot;%p\\n&quot;, p);\n\tprintf(&quot;%p\\n&quot;, arr);\n\n\treturn 0;\n&#125;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/7ec9babf3a1a43889625dc61d387f893.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>通过上面的展示，我们不难看出，数组名其实就是数组首元素的地址，那么据此我们结合前面所说知识就可以运用指针对数组进行一系列的访问。</li>\n<li>指针能有效地处理数组，数组表示法其实就是在变相地使用指针。</li>\n</ul>\n<p>例（1）：我们用指针来打印一个数组的元素：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint arr[5] &#x3D; &#123; 1,2,3,4,5 &#125;;\n\tint* parr &#x3D; arr; &#x2F;&#x2F; arr为数组名是首元素地址，这里将首元素地址交给指针变量parr\n\tint i &#x3D; 0;\n\tint sz &#x3D; sizeof(arr) &#x2F; sizeof(arr[0]);\n\n\tfor (i &#x3D; 0; i &lt; sz; i++)\n\t&#123;\n\t\tprintf(&quot;%d &quot;, *(parr + i)); &#x2F;&#x2F; 由首元素地址开始访问数组的每个元素地址并解引用操作打印\n\t&#125;\n\n\treturn 0;\n&#125;</code></pre>\n<p>运行结果为：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输出： 1 2 3 4 5</p></blockquote>\n<p>例（2）：我们用指针来修改一个数组里的元素：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint arr[5] &#x3D; &#123; 0 &#125;;\n\tint* p &#x3D; arr;\n\tint i &#x3D; 0;\n\tint sz &#x3D; sizeof(arr) &#x2F; sizeof(arr[0]);\n\n\tfor (i &#x3D; 0; i &lt; sz; i++)\n\t&#123;\n\t\t*(p + i) &#x3D; (i + 1);\n\t&#125;\n\n\tfor (i &#x3D; 0; i &lt; sz; i++)\n\t&#123;\n\t\tprintf(&quot;%d &quot;, arr[i]);\n\t&#125;\n\n\treturn 0;\n&#125;</code></pre>\n<p>运行结果：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输出：1 2 3 4 5</p></blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>指针我们不仅要学会，并且能够灵活的运用，这需要我们的基础知识与编程思维共同作用。</li>\n<li>本章只是指针初阶的一部分知识，但其已经为我们的指针打下了坚实的基础。学无止境，勇往直前！</li>\n</ul></blockquote>\n","text":"前言 C语言中指针可以说是最接近计算机的一种表达方式了，他是C语言中最难也最重要的一块，这就需要我们细心去学去体会指针的每一步效果，相信大家刚学指针时会有些许困惑，本章我们就来看看指针的初阶把。 1.指针是什么？ 指针是一个值为内存地址的变量； 指针提供一种以符号的形式使用地址的...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":22,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":22,"path":"api/tags/C语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E6%8C%87%E9%92%88%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">1.指针是什么？</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E6%8C%87%E9%92%88%E5%92%8C%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.指针和指针类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E5%A3%B0%E6%98%8E%E6%8C%87%E9%92%88\"><span class=\"toc-text\">2.1.声明指针</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.2.指针类型</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E9%87%8E%E6%8C%87%E9%92%88\"><span class=\"toc-text\">3.野指针</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E9%87%8E%E6%8C%87%E9%92%88%E7%9A%84%E6%88%90%E5%9B%A0\"><span class=\"toc-text\">3.1.野指针的成因</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-1-%E6%8C%87%E9%92%88%E6%9C%AA%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">3.1.1.指针未初始化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-2-%E6%8C%87%E9%92%88%E8%B6%8A%E7%95%8C%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">3.1.2.指针越界访问</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-3-%E6%8C%87%E9%92%88%E6%8C%87%E5%90%91%E7%9A%84%E7%A9%BA%E9%97%B4%E9%87%8A%E6%94%BE%EF%BC%88%E4%B8%8D%E5%85%B7%E4%BD%93%E5%B1%95%E5%BC%80%EF%BC%89\"><span class=\"toc-text\">3.1.3.指针指向的空间释放（不具体展开）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E5%A6%82%E4%BD%95%E8%A7%84%E9%81%BF%E9%87%8E%E6%8C%87%E9%92%88\"><span class=\"toc-text\">3.2.如何规避野指针</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E6%8C%87%E9%92%88%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">4.指针运算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-%E6%8C%87%E9%92%88-%E6%95%B4%E6%95%B0\"><span class=\"toc-text\">4.1.指针+-整数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-%E6%8C%87%E9%92%88%E5%87%8F%E6%8C%87%E9%92%88\"><span class=\"toc-text\">4.2.指针减指针</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-%E6%8C%87%E9%92%88%E7%9A%84%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">4.3.指针的关系运算</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E6%8C%87%E9%92%88%E5%92%8C%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">5.指针和数组</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"C语言指针练级攻略初级篇（2）","uid":"96e78203404f7982dd071e85a86cfcc4","slug":"C语言指针练级攻略初级篇（2）","date":"2023-02-17T15:32:59.000Z","updated":"2023-02-18T02:58:28.168Z","comments":true,"path":"api/articles/C语言指针练级攻略初级篇（2）.json","keywords":null,"cover":[],"text":"前言 紧跟上一章，这一章的指针相对较难一些，不过经过本章的学习，相信大家能够有所得 一.二级指针 上一章说的都是一级指针的应用，那么什么是二级指针呢？ 我们都知道，创建一个变量是需要在内存中开辟一个地址空间来存放的，那么指针（指针就是指针变量）也是如此，他也是一个变量，他也需要一...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":22,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":22,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},"next_post":{"title":"关于C语言常见操作符的解析和使用","uid":"dafd374449017f7aa00611ca0f3662e1","slug":"关于C语言常见操作符的解析和使用","date":"2023-02-17T14:40:44.000Z","updated":"2023-02-18T02:58:05.144Z","comments":true,"path":"api/articles/关于C语言常见操作符的解析和使用.json","keywords":null,"cover":[],"text":"前言 我们在学习C语言时肯定会用到不同的操作符来完成我们的功能，本章便是这些操作符的介绍与具体使用。 1. 算数操作符 算数操作符有四种，他们分别为： 加 “**+”，减 “-”，乘 “ * ”，除 “&#x2F;”， 取模 “%**” 值得注意的是,在C语言中乘号用 “ * “...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":22,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":22,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}}}