{"title":"关于C语言atoi函数的解析使用与自我实现","uid":"81fc7805ca264e2858b2ea302671831d","slug":"关于C语言atoi函数的解析使用与自我实现","date":"2023-02-18T06:24:52.000Z","updated":"2023-02-18T06:26:42.649Z","comments":true,"path":"api/articles/关于C语言atoi函数的解析使用与自我实现.json","keywords":null,"cover":"/photo/202322.jpg","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>对于<code>atoi</code>函数大家可能会有些陌生，不过当你选择并阅读到这里时，请往下阅读，我相信你能对<code>atoi</code>函数熟悉</li>\n<li>该函数的头文件为 <code>&lt;stdlib.h&gt;</code> 或      <code>&lt;cstdlib&gt;</code></li>\n</ul></blockquote>\n<h1 id=\"atoi函数的介绍\"><a href=\"#atoi函数的介绍\" class=\"headerlink\" title=\"atoi函数的介绍\"></a>atoi函数的介绍</h1><p><strong>此函数的功能是将数字字符的字符串转化为字面上的整型返回，<font color=blue>例如：</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">char arr[] &#x3D; &quot;1234&quot;;\n将”1234“ -&gt; 1234(int)</code></pre>\n\n<p>以下是函数原型：<br><img src=\"https://img-blog.csdnimg.cn/a562eff462a3489c8985cbe66ef08a4e.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/01cd7036bd444e879c1466e5e43ac2ba.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>要注意的点：</strong></p>\n<ul>\n<li>如果字符串从开头就有连续的空格字符，则跳过这些连续的空格字符，找到不是空格的字符。  <ol>\n<li>如果跳过这些空格字符后的第一个字符不是数字字符，则直接返回0；</li>\n<li>如果跳过这些空格字符后的第一个字符是数字字符，则从这个数字字符开始转换，并向后找<font color=red size=5>连续</font>的数字字符转换 ,如果连续中断，找到不是数字字符的字符，则在此截断寻找，返回前面已经转换好的连续的数字字符字面整型值。(这里截断向后寻找后，不管后面有没有数字字符函数都不管)</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/509a18cf99a142018a1aa56fb2e10ec3.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>如果字符串首元素不是空格字符<ol>\n<li>如果第一个字符不是数字字符，直接返回<code>0</code>。</li>\n<li>如果第一个字符是数字字符， 则从这个数字字符开始转换，并向后找<font color=red size=5>连续</font>的数字字符转换 ,如果连续中断，找到不是数字字符的字符，则在此截断寻找，返回前面已经转换好的连续的数字字符字面整型值。</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/5efaf065ec0e46aabe153cd90a44d9dd.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>如果字符串全部为空格字符，返回0；如果为空字符串，返回0；</li>\n</ul>\n<h1 id=\"atoi函数的使用\"><a href=\"#atoi函数的使用\" class=\"headerlink\" title=\"atoi函数的使用\"></a>atoi函数的使用</h1><ul>\n<li><strong>有了上面的介绍，使用的意图变得明显，使用起来也就随手就来了。</strong></li>\n</ul>\n<p>例如：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main()\n&#123;\n\tchar a[] &#x3D; &quot;&quot;;\n\tchar b[] &#x3D; &quot;     &quot;;\n\tchar c[] &#x3D; &quot;66666&quot;;\n\tchar d[] &#x3D; &quot;    @. 66ab&quot;;\n\tchar e[] &#x3D; &quot;    6666@qq.com&quot;;\n\tchar f[] &#x3D; &quot;520hehe&quot;;\n\tchar g[] &#x3D; &quot;i love you 555&quot;;\n\n\tprintf(&quot;%d\\n&quot;, atoi(a));\n\tprintf(&quot;%d\\n&quot;, atoi(b));\n\tprintf(&quot;%d\\n&quot;, atoi(c));\n\tprintf(&quot;%d\\n&quot;, atoi(d));\n\tprintf(&quot;%d\\n&quot;, atoi(e));\n\tprintf(&quot;%d\\n&quot;, atoi(f));\n\tprintf(&quot;%d\\n&quot;, atoi(g));\n\n\treturn 0;\n&#125;</code></pre>\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/b4630f7e77234d199eda5ea5b0153ae6.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>看上的结果，是不是就与介绍当中的点都对应起来了呢？</strong></p>\n<h1 id=\"atoi函数的自我实现\"><a href=\"#atoi函数的自我实现\" class=\"headerlink\" title=\"atoi函数的自我实现\"></a>atoi函数的自我实现</h1><p><strong>有了上面的铺垫，我们已经了解了该函数的特性，所以接下来的实现也就变的简单了</strong></p>\n<ol>\n<li>跳过空格字符（也可能没有，就不跳直接开始判断转换）；</li>\n<li>跳过后开始判断转换；</li>\n<li>无论何种方式开始判断第一个字符，如果不是数字字符，直接返回0。</li>\n</ol>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;assert.h&gt;\n\n&#x2F;&#x2F; 数字ASCLL码值范围为 48—57\n\nint my_atoi(const char* str)\n&#123;\n\tassert(str);\n\n\tconst char* tmp &#x3D; str;\n\twhile (*tmp &#x3D;&#x3D; &#39; &#39;)  &#x2F;&#x2F; 跳过空格字符\n\t\ttmp++;\n\t\n\tint num &#x3D; 0; &#x2F;&#x2F; 转换数字字符值的接收变量\n\n\t&#x2F;&#x2F; 如果是数字字符，就进来，到不连续处就停止\n\twhile (*tmp &lt;&#x3D; 57 &amp;&amp; *tmp &gt;&#x3D; 48)  \n\t&#123;\n\t\tnum &#x3D; num * 10 + (*tmp - &#39;0&#39;);\n\n\t\tif (*(tmp + 1) &lt; 48 || *(tmp + 1) &gt; 57)\n\t\t&#123;\n\t\t\treturn num;\n\t\t&#125;\n\n\t\ttmp++;\n\t&#125;\n\n\t&#x2F;&#x2F; 如果开始判断的字符不是数字字符，前面的循环不进去，这里直接返回0\n\treturn 0;\n&#125;\n\nint main()\n&#123;\n\tchar a[] &#x3D; &quot;&quot;;\n\tchar b[] &#x3D; &quot;     &quot;;\n\tchar c[] &#x3D; &quot;66666&quot;;\n\tchar d[] &#x3D; &quot;    @. 66ab&quot;;\n\tchar e[] &#x3D; &quot;    6666@qq.com&quot;;\n\tchar f[] &#x3D; &quot;520hehe&quot;;\n\tchar g[] &#x3D; &quot;i love you 555&quot;;\n\n\tprintf(&quot;%d\\n&quot;, my_atoi(a)); &#x2F;&#x2F; 0\n\tprintf(&quot;%d\\n&quot;, my_atoi(b)); &#x2F;&#x2F; 0\n\tprintf(&quot;%d\\n&quot;, my_atoi(c)); &#x2F;&#x2F; 66666\n\tprintf(&quot;%d\\n&quot;, my_atoi(d)); &#x2F;&#x2F; 0\n\tprintf(&quot;%d\\n&quot;, my_atoi(e)); &#x2F;&#x2F; 6666\n\tprintf(&quot;%d\\n&quot;, my_atoi(f)); &#x2F;&#x2F; 520\n\tprintf(&quot;%d\\n&quot;, my_atoi(g)); &#x2F;&#x2F; 0\n\n\treturn 0;\n&#125;</code></pre>\n\n\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>相信你已经对这个函数了如指掌了，认识掌握的函数越多，当然是没有坏处只有好处的。经过对<code>atoi</code>函数的学习，我相信你也会感觉到这个函数有好处也有缺陷，不过得用且用吧，在用的时候一定要脑子清醒，不要到头来骂这个函数，哈哈哈哈。</p></blockquote>\n<p><strong>感谢阅读本小白的博客，错误的地方请严厉指出噢！</strong></p>\n","text":"前言 对于atoi函数大家可能会有些陌生，不过当你选择并阅读到这里时，请往下阅读，我相信你能对atoi函数熟悉 该函数的头文件为 &lt;stdlib.h&gt; 或 &lt;cstdlib&gt; atoi函数的介绍此函数的功能是将数字字符的字符串转化为字面上的整型返回，例如：...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#atoi%E5%87%BD%E6%95%B0%E7%9A%84%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">atoi函数的介绍</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#atoi%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">atoi函数的使用</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#atoi%E5%87%BD%E6%95%B0%E7%9A%84%E8%87%AA%E6%88%91%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">atoi函数的自我实现</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E\"><span class=\"toc-text\">写在最后</span></a></li></ol>","author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"C语言一个特殊的数组【柔性数组】","uid":"c624797c7b313fdd30471a2503f8d11d","slug":"C语言一个特殊的数组【柔性数组】","date":"2023-02-18T06:29:28.000Z","updated":"2023-02-18T06:30:24.629Z","comments":true,"path":"api/articles/C语言一个特殊的数组【柔性数组】.json","keywords":null,"cover":"/photo/OIP-C.jpeg","text":"前言 也许你从来就没有听过柔性数组（flexible array）这个概念，但他是真的存在； 柔性数组的概念存在于C99标准当中，C99标准表示：结构体的最后一个成员可以是一个大小不确定的数组，这个数组就叫做柔性数组; 既然搭配了柔性这一修饰词，那么这个数组就不会是”耿直“的了。...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},"next_post":{"title":"关于C语言非常重要的动态内存管理函数的解析和使用","uid":"a34c5dd4aef1e7a0fbf034a166eaf417","slug":"关于C语言非常重要的动态内存管理函数的解析和使用","date":"2023-02-18T06:14:44.000Z","updated":"2023-03-03T16:13:18.254Z","comments":true,"path":"api/articles/关于C语言非常重要的动态内存管理函数的解析和使用.json","keywords":null,"cover":"/photo/屏幕截图_20230122_041251.png","text":"前言 动态内存管理函数可以说很好用，但是有些小危险。 所谓动态内存分配，就是指在程序执行的过程中动态地分配或者回收存储空间的分配内存的方法。 动态内存分配不像 数组 等 静态内存 分配方法那样需要预先分配存储空间，而是由系统根据程序的需要即时分配，且分配的大小就是程序要求的大小。...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}},"feature":null}}