{"title":"关于C语言常见操作符的解析和使用","uid":"dafd374449017f7aa00611ca0f3662e1","slug":"关于C语言常见操作符的解析和使用","date":"2023-02-17T14:40:44.000Z","updated":"2023-02-18T02:58:05.144Z","comments":true,"path":"api/articles/关于C语言常见操作符的解析和使用.json","keywords":null,"cover":[],"content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>我们在学习C语言时肯定会用到不同的操作符来完成我们的功能，本章便是这些操作符的介绍与具体使用。</li>\n</ul></blockquote>\n<h1 id=\"1-算数操作符\"><a href=\"#1-算数操作符\" class=\"headerlink\" title=\"1. 算数操作符\"></a>1. 算数操作符</h1><ul>\n<li>算数操作符有四种，他们分别为：<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>加 “**+<strong>”，减 “</strong>-<strong>”，乘 “ * ”，除 “</strong>&#x2F;<strong>”， 取模 “</strong>%**” </li>\n<li>值得注意的是,在C语言中乘号用 “ * “ 表示, 除号用  “ &#x2F; “  表示。</li>\n<li>取模号 “ % “ 求的是余数,比如 5除3余2 ,那么2便是计算的结果。</li>\n<li>通俗易懂,通过我们的数学知识很清楚的知道他们的作用。</li>\n</ul></blockquote>\n</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int main()\n&#123;\n\tint a &#x3D; 20;\n\tint b &#x3D; 12;\n\t\n\tprintf(&quot;a + b &#x3D; %d\\n&quot;, a + b);\n\tprintf(&quot;a - b &#x3D; %d\\n&quot;, a - b);\n\tprintf(&quot;a÷b &#x3D; %d\\n&quot;, a &#x2F; b); &#x2F;&#x2F; 这里20除12等于1，他不会显示后面的小数，除非计算式两边至少有一个浮点数\n\tprintf(&quot;a×b &#x3D; %d\\n&quot;, a * b);\n\tprintf(&quot;a % b &#x3D; %d\\n&quot;, a % b); &#x2F;&#x2F; 这里20模12余数是8，结果便是8\n\n\treturn 0;\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/5bee61b965c4487a8bf57e9f9403de7f.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>值得注意的是,当计算式两边至少有一个浮点数的时候,相除才会计算出小数.</li>\n</ul>\n<h1 id=\"2-移位操作符\"><a href=\"#2-移位操作符\" class=\"headerlink\" title=\"2.移位操作符\"></a>2.移位操作符</h1><p>首先,我们来补充一个小知识:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>我们都知道,一个数在内存中是以二进制数来存放的,存放的是这个数的补码,那么什么是补码呢?</li>\n<li>一个数的二进制有原码,反码和补码,在计算中是用补码来计算的,而打印出来的是原码,这三个码之间有这样的关系,原码符号位不变,其它位按位取反得到反码,反码加一得到补码,而又补码要得到原码,反过来就是了.</li>\n<li>正数的原码反码补码相同,而负数则需要结果上面的计算来得到.</li>\n<li>由上可以得到,移位操作符,移位其实移的是在内存中储存的二进制数的补码.</li>\n</ul></blockquote>\n<h2 id=\"2-1-左移操作符\"><a href=\"#2-1-左移操作符\" class=\"headerlink\" title=\"2.1. 左移操作符\"></a>2.1. 左移操作符</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>(&lt;&lt;) : 补码左移,左边抛弃,右边补0.</p></blockquote>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint a &#x3D; 10;\n\t&#x2F;&#x2F; a是一个整数所以他的原码，反码，补码相同\n    &#x2F;&#x2F; 原码：00000000000000000000000000001010\n    &#x2F;&#x2F; 反码：00000000000000000000000000001010\n    &#x2F;&#x2F; 补码：00000000000000000000000000001010\n\tint b &#x3D; 15;\n\tint c &#x3D; -5;\n\t&#x2F;&#x2F; c为负数\n\t&#x2F;&#x2F; 原码：10000000000000000000000000000101\n\t&#x2F;&#x2F; 反码：11111111111111111111111111111010\n\t&#x2F;&#x2F; 补码：11111111111111111111111111111011\n\t&#x2F;&#x2F; 左移后：11111111111111111111111111110110 \n\t&#x2F;&#x2F; 减一：11111111111111111111111111110101\n\t&#x2F;&#x2F; 取反得到计算后的原码：10000000000000000000000000001010 - （-10）\n\n\tprintf(&quot;%d\\n&quot;, a &lt;&lt; 1); &#x2F;&#x2F; 左移1 &#x2F;&#x2F; 00000000000000000000000000010100 - 20\n\tprintf(&quot;%d\\n&quot;, b &lt;&lt; 1); &#x2F;&#x2F; 左移1 &#x2F;&#x2F; 00000000000000000000000000010100 - 30\n\tprintf(&quot;%d\\n&quot;, c &lt;&lt; 1); &#x2F;&#x2F; 左移1\n\t&#x2F;&#x2F; 补码左移 右边补 0\n\t&#x2F;&#x2F; 00000000000000000000000000010100 - 20\n\n\treturn 0;\n&#125;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/043b5a15ff6c4150b6cca460ef906ef8.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>不难看出,左移操作符具有乘以 2 的效果.</li>\n</ul>\n<h2 id=\"2-2-右移操作符\"><a href=\"#2-2-右移操作符\" class=\"headerlink\" title=\"2.2. 右移操作符\"></a>2.2. 右移操作符</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>(&gt;&gt;):右移操作符与左移操作符计算过程几乎相同,有一点不同的是,右移操作符分为算数右移和逻辑右移:</p>\n<ul>\n<li>算数右移: 左边补符号位,右边抛弃.</li>\n<li>逻辑右移: 左边补0,右边抛弃.</li>\n<li>通常来说进行右移时是逻辑右移.</li>\n</ul></blockquote>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint a &#x3D; 10;\n\tint b &#x3D; -5;\n\n\tprintf(&quot;%d\\n&quot;, a &gt;&gt; 1); &#x2F;&#x2F; 5\n\tprintf(&quot;%d\\n&quot;, b &gt;&gt; 1); &#x2F;&#x2F; -3\n\t&#x2F;&#x2F; b计算过程\n\t&#x2F;&#x2F; 原码：10000000000000000000000000000101\n\t&#x2F;&#x2F; 反码：11111111111111111111111111111010\n\t&#x2F;&#x2F; 补码：11111111111111111111111111111011\n\t&#x2F;&#x2F; 右移：11111111111111111111111111111101\n\t&#x2F;&#x2F; 减一：11111111111111111111111111111100\n\t&#x2F;&#x2F; 取反：10000000000000000000000000000011\n\t&#x2F;&#x2F; 右移1后的数为 10000000000000000000000000000011 - （-3）\n\n\treturn 0;\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/e190b7137b024582ac84b8d5ce5b0b3b.png#pic_center\" alt=\"在这里插入图片描述\"><br><strong>无论是左移还是右移,我们都不能移动负数为,如: a &gt;&gt; -1.</strong></p>\n<h1 id=\"3-位操作符\"><a href=\"#3-位操作符\" class=\"headerlink\" title=\"3.位操作符\"></a>3.位操作符</h1><p>同样的,位操作符也是对补码进行计算</p>\n<h2 id=\"3-1-amp\"><a href=\"#3-1-amp\" class=\"headerlink\" title=\"3.1 &amp;\"></a>3.1 &amp;</h2><ul>\n<li>按位与是 : 如果两个二进制补码相同位数上有一个为零则为0,都为1则为1.</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint a &#x3D; -5;\n\t&#x2F;&#x2F; 原：10000000000000000000000000000101\n\t&#x2F;&#x2F; 反：11111111111111111111111111111010\n\t&#x2F;&#x2F; 补：11111111111111111111111111111011\n\tint b &#x3D; 3;\n\t&#x2F;&#x2F; 原：00000000000000000000000000000011\n\t&#x2F;&#x2F; 补：00000000000000000000000000000011\n\n\t&#x2F;&#x2F; a &amp; b\n\t&#x2F;&#x2F; 补：11111111111111111111111111111011\n\t&#x2F;&#x2F; 补：00000000000000000000000000000011\n\t&#x2F;&#x2F; 有一个0则为0，都为1则1\n\t&#x2F;&#x2F; 得：00000000000000000000000000000011\n\t&#x2F;&#x2F; 为整数：3\n\tprintf(&quot;%d&quot;, a &amp; b);\n\n\treturn 0;\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/35b777eb95be4c8cb71b57e93e380d8f.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-2\"><a href=\"#3-2\" class=\"headerlink\" title=\"3.2 |\"></a>3.2 |</h2><ul>\n<li>按位或是 : 如果两个二进制补码相同位数上只要有一个为1则为1,全0则0.</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint a &#x3D; 10;\n\t&#x2F;&#x2F; 补：00000000000000000000000000001010\n\tint b &#x3D; -2;\n\t&#x2F;&#x2F; 原：10000000000000000000000000000010\n\t&#x2F;&#x2F; 反：11111111111111111111111111111101\n\t&#x2F;&#x2F; 补：11111111111111111111111111111110\n\n\t&#x2F;&#x2F; a | b\n\t&#x2F;&#x2F; 00000000000000000000000000001010 \n\t&#x2F;&#x2F; 11111111111111111111111111111110\n\t&#x2F;&#x2F; 11111111111111111111111111111110 结果\n\t&#x2F;&#x2F; 减一：11111111111111111111111111111101\n\t&#x2F;&#x2F; 取反：10000000000000000000000000000010 （-2）\n\tprintf(&quot;%d&quot;, a | b); &#x2F;&#x2F; -2\n\n\treturn 0;\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/5f1bb24690fe42d7a19808024fefc72a.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-3\"><a href=\"#3-3\" class=\"headerlink\" title=\"3.3 ^\"></a>3.3 ^</h2><ul>\n<li>按位异或是：相同为0，相异为1.</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint a &#x3D; 3;\n\t&#x2F;&#x2F; 补：00000000000000000000000000000011\n\tint b &#x3D; 5;\n\t&#x2F;&#x2F; 补：00000000000000000000000000000101\n\n\t&#x2F;&#x2F; a ^ b\n\t&#x2F;&#x2F; 00000000000000000000000000000011\n\t&#x2F;&#x2F; 00000000000000000000000000000101\n\t&#x2F;&#x2F; 00000000000000000000000000000110 - 6\n\tprintf(&quot;%d\\n&quot;, a ^ b); &#x2F;&#x2F; 6\n\tprintf(&quot;%d\\n&quot;, a ^ 0); &#x2F;&#x2F; a\n\tprintf(&quot;%d\\n&quot;, b ^ 0); &#x2F;&#x2F; b\n\tprintf(&quot;%d\\n&quot;, a ^ a); &#x2F;&#x2F; 0\n\n\treturn 0;\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/8dbfaf1743ca4545a429deb2bb78df72.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>值得注意的是：</li>\n<li>a ^ 0 &#x3D; a;</li>\n<li>b ^ 0 &#x3D; b;</li>\n<li>a ^ a &#x3D; 0;</li>\n<li>那么可以得到：</li>\n<li>a ^ a ^ b &#x3D; b;</li>\n<li>b ^ b ^ a &#x3D; a;<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>有一道经典题目：不创建临时变量交换两个变量的值。我们便可以用上述推理来实现</p></blockquote>\n</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;![在这里插入图片描述](https:&#x2F;&#x2F;img-blog.csdnimg.cn&#x2F;82c60be1cb6f4fc0b0a5b41971123922.png#pic_center)\n\n\tint a &#x3D; 3;\n\tint b &#x3D; 5;\n\n\tprintf(&quot;交换前：%d %d\\n&quot;, a, b);\n\n\ta &#x3D; a ^ b;\n\tb &#x3D; a ^ b;\n\ta &#x3D; a ^ b;\n\n\tprintf(&quot;交换后：%d %d\\n&quot;, a, b);\n\n\treturn 0;\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/6fa90e9b5d764ce993c6dccf7fbc5d9d.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-4\"><a href=\"#3-4\" class=\"headerlink\" title=\"3.4 ~\"></a>3.4 ~</h2><p>按位取反是补码二进制位如果是1则变为0，如果是0则变为1。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint a &#x3D; 3;\n\t&#x2F;&#x2F; 补：00000000000000000000000000000011\n\t&#x2F;&#x2F; 反：11111111111111111111111111111100  补码变负\n\t&#x2F;&#x2F; -1：11111111111111111111111111111011\n\t&#x2F;&#x2F; 原：10000000000000000000000000000100  -4\n\tprintf(&quot;%d&quot;, ~a);\n\n\treturn 0;\n&#125;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/e207382729da4202a2da3264012db71f.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"4-赋值操作符\"><a href=\"#4-赋值操作符\" class=\"headerlink\" title=\"4.赋值操作符\"></a>4.赋值操作符</h1><ul>\n<li><p>&#x3D;<br>例如：a &#x3D; 5,这里将5赋值给变量a</p>\n</li>\n<li><p>复合型：</p>\n</li>\n<li><p>+&#x3D;  </p>\n</li>\n<li><p>-&#x3D;</p>\n</li>\n<li><p>&#x2F;&#x3D;</p>\n</li>\n<li><p>*&#x3D;</p>\n</li>\n<li><p>%&#x3D;</p>\n</li>\n<li><p>&amp;&#x3D;</p>\n</li>\n<li><p>|&#x3D;</p>\n</li>\n<li><p>^&#x3D;</p>\n</li>\n<li><p>（&lt;&lt;&#x3D;）</p>\n</li>\n<li><p>（&gt;&gt;&#x3D;）<br>例如：a+&#x3D;2其实就是a&#x3D;a+2,其他的复合型都是如此</p>\n</li>\n</ul>\n<h1 id=\"5-单目操作符\"><a href=\"#5-单目操作符\" class=\"headerlink\" title=\"5.单目操作符\"></a>5.单目操作符</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><pre><code>  -            负值\n  +            正值\n  ++           a++：后置加加  ; ++a：前置加加（都是a+=1）\n  --           与++效果相同\n  !            逻辑反操作\n  &amp;            取地址符号\n  ~            二进制数按位取反\n  *            解引用操作\n  sizeof       求类型长度（以字节为单位）\n  (类型)        强制类型转换\n</code></pre>\n<p>这里对++和！作讲解</p></blockquote>\n<p>++<br> 首先看代码：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint a &#x3D; 1;\n\tint b &#x3D; a++; &#x2F;&#x2F; 先把a的值赋给b，a再自增1\n\tint c &#x3D; ++a; &#x2F;&#x2F; a先自增1，再赋值给c\n\n\tprintf(&quot;%d\\n&quot;, a); &#x2F;&#x2F; 3\n\tprintf(&quot;%d\\n&quot;, b); &#x2F;&#x2F; 1\n\tprintf(&quot;%d\\n&quot;, c); &#x2F;&#x2F; 3\n\n\treturn 0;\n&#125;</code></pre>\n<p>前置加加和后置加加其实在上述代码里其实效果很明显了，只要我们用一次++，其对应变量就要自增1。–与++的运用效果是相同的，只不过说是自减1。</p>\n<p>！：!&#x3D; 就是不等于，其相当于非。!0 就是真，!1就是假。</p>\n<h1 id=\"6-关系操作符\"><a href=\"#6-关系操作符\" class=\"headerlink\" title=\"6.关系操作符\"></a>6.关系操作符</h1><ul>\n<li>(&gt;)</li>\n<li>(&gt;&#x3D;)</li>\n<li>(&lt;)</li>\n<li>(&lt;&#x3D;)</li>\n<li>(!&#x3D;)</li>\n<li>(&#x3D;&#x3D;)</li>\n</ul>\n<p>上述操作符多用在判断语句中，用来决定程序进程变化。</p>\n<h1 id=\"7-逻辑操作符\"><a href=\"#7-逻辑操作符\" class=\"headerlink\" title=\"7.逻辑操作符\"></a>7.逻辑操作符</h1><h2 id=\"amp-amp\"><a href=\"#amp-amp\" class=\"headerlink\" title=\"&amp;&amp;\"></a>&amp;&amp;</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>逻辑与：如 a&amp;&amp;b ，当a,b都为真时，表达式为真，当其中有一个为假时为假</p></blockquote>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint a &#x3D; 0;\n\tint b &#x3D; 1;\n\tint c &#x3D; 2;\n\tint d &#x3D; 3;\n\tint i &#x3D; a++ &amp;&amp; ++b &amp;&amp; c++; &#x2F;&#x2F; a++表达式结果为a的值，此时a&#x3D;0,由&amp;&amp;的性质有一个为假就为假，则后面都不计算了\n    &#x2F;&#x2F;但是a++还是要进行计算的，也就是a要自增1\n\tprintf(&quot;%d %d %d %d\\n&quot;, a, b, c, d);\n    &#x2F;&#x2F; 结果为 1 1 2 3\n\treturn 0;\n&#125;</code></pre>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"||\"></a>||</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>逻辑或：如 a || b，当a，b中只要有一个为真，表达式为真，都为假表达式才为假</p></blockquote>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint a &#x3D; 1;\n\tint b &#x3D; 2;\n\tint c &#x3D; 3;\n\tint d &#x3D; 4;\n\tint i &#x3D; a++ || b++ || ++d || c--; &#x2F;&#x2F; a++表达式结果为a，此时a&#x3D;1为真，由||性质，整个表达式结果为真，则后面的不计算了\n\t&#x2F;&#x2F; a++还是要计算的，也就是a要自增1\n\n\tprintf(&quot;%d %d %d %d\\n&quot;, a, b, c, d);\n\t&#x2F;&#x2F; 结果为 2 2 3 4\n\n\treturn 0;\n&#125;</code></pre>\n\n<h2 id=\"结合\"><a href=\"#结合\" class=\"headerlink\" title=\"结合\"></a>结合</h2><p>我们可以通过判断闰年这个经典的题目来熟悉掌握&amp;&amp; ||。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint n &#x3D; 0;\n\tscanf(&quot;%d&quot;, &amp;n);\n\n\tif (((n % 4 &#x3D;&#x3D; 0) &amp;&amp; (n % 100 !&#x3D; 0)) || (n % 400 &#x3D;&#x3D; 0))\n\t&#123;\n\t\tprintf(&quot;%d年是闰年！\\n&quot;, n);\n\t&#125;\n\telse\n\t&#123;\n\t\tprintf(&quot;%d不是闰年！\\n&quot;, n);\n\t&#125;\n\n\treturn 0;\n&#125;</code></pre>\n\n<h1 id=\"8-条件操作符\"><a href=\"#8-条件操作符\" class=\"headerlink\" title=\"8.条件操作符\"></a>8.条件操作符</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>exp1 ？ exp2：exp3;</p></blockquote>\n<ul>\n<li>如果 exp1 为真，表达式结果为 exp2</li>\n<li>如果 exp1 为假，表达式结果为 exp3</li>\n</ul>\n<p>例如求两个变量的最大值：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint a &#x3D; 0;\n\tint b &#x3D; 0;\n\tscanf(&quot;%d %d&quot;, &amp;a, &amp;b);\n\n\tprintf(&quot;max &#x3D; %d\\n&quot;, (a &gt; b ? a : b));\n\n\treturn 0;\n&#125;</code></pre>\n\n<h1 id=\"9-逗号表达式\"><a href=\"#9-逗号表达式\" class=\"headerlink\" title=\"9.逗号表达式\"></a>9.逗号表达式</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>优先级最低</li>\n<li>用逗号隔开多个表达式</li>\n<li>整个表达式由左向右依次计算，计算结果为最后一个表达式的结果</li>\n</ul></blockquote>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint a &#x3D; 1;\n\tint b &#x3D; 2;\n\n\tint c &#x3D; (a +&#x3D; 2, b &#x3D; b + 1, a +&#x3D; 1, a &#x2F; 2);\n\n\tprintf(&quot;%d&quot;, c); &#x2F;&#x2F; 2\n\n\treturn 0;\n&#125;</code></pre>\n<p>我们可以看到从左向右依次计算，最后a &#x3D; 4，4 &#x2F; 2 &#x3D; 2，所以最后c的值为2；</p>\n<h1 id=\"10-表达式求值\"><a href=\"#10-表达式求值\" class=\"headerlink\" title=\"10.表达式求值\"></a>10.表达式求值</h1><h2 id=\"10-1-隐式类型转换\"><a href=\"#10-1-隐式类型转换\" class=\"headerlink\" title=\"10.1.隐式类型转换\"></a>10.1.隐式类型转换</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>CPU在进行运算的时候一般使用整形int，所以在有些时候，当一个小于整形的类型进行计算时，计算机就会先进行整形提升再进行运算，这就是隐式类型转换。</p></blockquote>\n<p>（通用CPU是难以直接实现两个非整形的直接相加运算）</p>\n<p>例：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;&#x2F; char short int long ...\n&#x2F;&#x2F;  1     2    4\nint main()\n&#123;\n\t&#x2F;&#x2F;char --&gt; signed char\n\tchar a &#x3D; 3;\n\t&#x2F;&#x2F;截断\n\t&#x2F;&#x2F;00000000000000000000000000000011\n\t&#x2F;&#x2F;00000011 - a\n\t&#x2F;&#x2F;\n\tchar b &#x3D; 127;\n\t&#x2F;&#x2F;00000000000000000000000001111111\n\t&#x2F;&#x2F;01111111 - b\n \n\tchar c &#x3D; a + b;\n\t&#x2F;&#x2F;00000011\n\t&#x2F;&#x2F;01111111\n\t&#x2F;&#x2F;整型提升\n\t&#x2F;&#x2F;00000000000000000000000000000011 - a\n\t&#x2F;&#x2F;00000000000000000000000001111111 - b\n\t&#x2F;&#x2F;00000000000000000000000010000010 - a + b &#x3D;c\n\t&#x2F;&#x2F;截断\n\t&#x2F;&#x2F;10000010 - c\n\tprintf(&quot;%d\\n&quot;, c);\n\t&#x2F;&#x2F;%d 是打印十进制的整数\n\t&#x2F;&#x2F;11111111111111111111111110000010 - 补码\n\t&#x2F;&#x2F;11111111111111111111111110000001 - 反码\n\t&#x2F;&#x2F;10000000000000000000000001111110 - 原码\n\t&#x2F;&#x2F;-126\n\treturn 0;\n\t&#125;\n\n————————————————\n版权声明：本文为CSDN博主「戊子仲秋」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https:&#x2F;&#x2F;blog.csdn.net&#x2F;Locky136&#x2F;article&#x2F;details&#x2F;127812345&#x3D;</code></pre>\n<p>输出结果：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输出：-126</p></blockquote>\n<p>注：</p>\n<p>char：</p>\n<p>有符号的char的取值范围是：-128~127</p>\n<p>无符号的char的取值范围是：0~255</p>\n<ul>\n<li>以上是一位大佬的讲解（写的很详细），这里直接引用他的，大家可以多看看他的博客，一定会有很大的帮助的。<br>                                                      ——@戊子仲秋</li>\n</ul>\n<h2 id=\"10-2-算数转换\"><a href=\"#10-2-算数转换\" class=\"headerlink\" title=\"10.2.算数转换\"></a>10.2.算数转换</h2><p>long double：最高<br>↑<br>double<br>↑<br>float unsigned long int<br>↑<br>long int<br>↑<br>unsigned int<br>↑<br>int</p>\n<ul>\n<li>当我们再利用两个不同类型的变量来进行计算时，其算数级低的会自动升级到算数级高的类型去进行计算，如果进行一些不正当的算数转换，会导致数据丢失。</li>\n</ul>\n<p>如：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tfloat e &#x3D; 2.717f;\n\tint w &#x3D; e;\n\n\tprintf(&quot;%d&quot;, w);\n\n\treturn 0;\n&#125;</code></pre>\n<p>运行结果为：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输出： 2</p></blockquote>\n<p>可以看到，e值小数点后面的数丢失了，这是由高级到低级转换的结果（不能用）</p>\n<h1 id=\"11-操作符的准确使用\"><a href=\"#11-操作符的准确使用\" class=\"headerlink\" title=\"11.操作符的准确使用\"></a>11.操作符的准确使用</h1><ul>\n<li>操作符之间有其对应的优先级，当我们进行运算时，优先比较相邻两个操作符的优先级，如果一个表达式很复杂，简易用（）来分明其运算顺序，不然在不同的编译器上可能会有不同的运算结果。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>C语言中操作符的使用可以说是司空见惯的，如何正确的使用是我们必须掌握的，学到后面，我们可以尝试着巧妙运用操作符去解决一些复杂的问题，这需要我们不断地练习与巩固。在此，感谢大家的阅读！</p></blockquote>\n","text":"前言 我们在学习C语言时肯定会用到不同的操作符来完成我们的功能，本章便是这些操作符的介绍与具体使用。 1. 算数操作符 算数操作符有四种，他们分别为： 加 “**+”，减 “-”，乘 “ * ”，除 “&#x2F;”， 取模 “%**” 值得注意的是,在C语言中乘号用 “ * “...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":14,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":14,"path":"api/tags/C语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E7%AE%97%E6%95%B0%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">1. 算数操作符</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E7%A7%BB%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">2.移位操作符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E5%B7%A6%E7%A7%BB%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">2.1. 左移操作符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E5%8F%B3%E7%A7%BB%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">2.2. 右移操作符</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">3.位操作符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-amp\"><span class=\"toc-text\">3.1 &amp;</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2\"><span class=\"toc-text\">3.2 |</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3\"><span class=\"toc-text\">3.3 ^</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4\"><span class=\"toc-text\">3.4 ~</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E8%B5%8B%E5%80%BC%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">4.赋值操作符</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E5%8D%95%E7%9B%AE%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">5.单目操作符</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-%E5%85%B3%E7%B3%BB%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">6.关系操作符</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7-%E9%80%BB%E8%BE%91%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">7.逻辑操作符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#amp-amp\"><span class=\"toc-text\">&amp;&amp;</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">||</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E5%90%88\"><span class=\"toc-text\">结合</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#8-%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">8.条件操作符</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#9-%E9%80%97%E5%8F%B7%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">9.逗号表达式</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#10-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC\"><span class=\"toc-text\">10.表达式求值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-1-%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">10.1.隐式类型转换</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-2-%E7%AE%97%E6%95%B0%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">10.2.算数转换</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#11-%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E5%87%86%E7%A1%AE%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">11.操作符的准确使用</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"坏 幸 运","slug":"blog-author","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.0bab160015bf9e56450d5fded33bd448?rik=VFMstq3mAZG1pg&riu=http%3a%2f%2fwww.qzqn8.com%2fwp-content%2fuploads%2f2020%2f02%2f3-9.jpg&ehk=pnkhUlGCDYmxisEuCwYL4zXW92froAxt%2f0B5i9AYAkY%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"C语言指针练级攻略初级篇（1）","uid":"2aa79aad05ade9ad90a236a03dfb831e","slug":"C语言指针练级攻略初级篇（1）","date":"2023-02-17T15:30:00.000Z","updated":"2023-02-18T02:58:35.316Z","comments":true,"path":"api/articles/C语言指针练级攻略初级篇（1）.json","keywords":null,"cover":[],"text":"前言 C语言中指针可以说是最接近计算机的一种表达方式了，他是C语言中最难也最重要的一块，这就需要我们细心去学去体会指针的每一步效果，相信大家刚学指针时会有些许困惑，本章我们就来看看指针的初阶把。 1.指针是什么？ 指针是一个值为内存地址的变量； 指针提供一种以符号的形式使用地址的...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":14,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":14,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.0bab160015bf9e56450d5fded33bd448?rik=VFMstq3mAZG1pg&riu=http%3a%2f%2fwww.qzqn8.com%2fwp-content%2fuploads%2f2020%2f02%2f3-9.jpg&ehk=pnkhUlGCDYmxisEuCwYL4zXW92froAxt%2f0B5i9AYAkY%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},"next_post":{"title":"一文带你灵活使用C语言的数组","uid":"b82bfb4a02f130e6ce0f96366fdc8a1f","slug":"一文带你灵活使用C语言的数组","date":"2023-02-17T14:38:44.000Z","updated":"2023-02-18T02:57:53.229Z","comments":true,"path":"api/articles/一文带你灵活使用C语言的数组.json","keywords":null,"cover":[],"text":"一. 什么是数组？ 数组是由数据类型相同的一系列元素组成的。需要使用数组时，通过声明数组告诉编译器数组中内含多少元素和这些元素的类型。编译器根据这些信息正确的创建数组。普通变量可以使用的类型，数组元素都可以使用。 二. 一维数组1. 一维数组的创建和初始化1.1. 一维数组的创建...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":14,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":14,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.0bab160015bf9e56450d5fded33bd448?rik=VFMstq3mAZG1pg&riu=http%3a%2f%2fwww.qzqn8.com%2fwp-content%2fuploads%2f2020%2f02%2f3-9.jpg&ehk=pnkhUlGCDYmxisEuCwYL4zXW92froAxt%2f0B5i9AYAkY%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}}}