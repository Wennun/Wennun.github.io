{"title":"C语言一个特殊的数组【柔性数组】","uid":"c624797c7b313fdd30471a2503f8d11d","slug":"C语言一个特殊的数组【柔性数组】","date":"2023-02-18T06:29:28.000Z","updated":"2023-02-18T06:30:24.629Z","comments":true,"path":"api/articles/C语言一个特殊的数组【柔性数组】.json","keywords":null,"cover":"/photo/OIP-C.jpeg","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>也许你从来就没有听过<code>柔性数组</code>（<code>flexible array</code>）这个概念，但他是真的存在；</li>\n<li>柔性数组的概念存在于<code>C99</code>标准当中，<code>C99</code>标准表示：结构体的最后一个成员可以是一个大小不确定的数组，这个数组就叫做<code>柔性数组</code>;</li>\n<li>既然搭配了<code>柔性</code>这一修饰词，那么这个数组就不会是”耿直“的了。</li>\n</ul></blockquote>\n<h1 id=\"柔性数组的特点\"><a href=\"#柔性数组的特点\" class=\"headerlink\" title=\"柔性数组的特点\"></a>柔性数组的特点</h1><ol>\n<li>柔性数组的大小是不确定的；</li>\n<li>他是存在于结构体当中，并且只能放在结构体的最后一个成员位置；</li>\n<li>柔性数组所在位置的前面至少要有一个成员；</li>\n<li>当柔性数组存在于一个结构体当中时，计算结构体的大小，不将柔性数组算在内；</li>\n<li>柔性数组是未知大小的数组，要使用他，必须要用<code>malloc</code>来为他开辟空间，并且这个空间的大小一定要大于所在结构体的大小，简单来说，这个开辟的空间的大小减去所在的结构体大小剩下的空间就是这个柔性数组可以使用的了。</li>\n</ol>\n<p>柔性数组的定义：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">1.\nstruct s\n&#123;\n\tchar a;\n\tint a[];  &#x2F;&#x2F; [] 里不放数据\n&#125;;\n&#x2F;&#x2F; 当然也可以\n2.\nstruct s\n&#123;\n\tint a;\n\tchar b[0]; &#x2F;&#x2F; 上面的定义在有些编译器上可能会报错，这样也是可以的\n&#125;;</code></pre>\n\n<p>上述<code>1</code>中的<code>int a[]</code>,<code>2</code>中的<code>char b[0]</code>,就是所谓的柔性数组。</p>\n<p><strong>柔性数组的大小是不确定，下面来测试一下结构体的大小：</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n&#x2F;&#x2F;1.\nstruct s1\n&#123;\n\tchar a;\n\tchar b;\n\tint c;\n\tint d[];  &#x2F;&#x2F; [] 里不放数据\n&#125;;\n&#x2F;&#x2F; 当然也可以\n&#x2F;&#x2F;2.\nstruct s2\n&#123;\n\tint a;\n\tint b;\n\tint c;\n\tchar d[0]; &#x2F;&#x2F; 上面的定义在有些编译器上可能会报错，这样也是可以的\n&#125;;\n\nint main()\n&#123;\n\tprintf(&quot;%d\\n&quot;, (int)sizeof(struct s1));\n\tprintf(&quot;%d\\n&quot;, (int)sizeof(struct s2));\n\n\treturn 0;\n&#125;</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/267d41fad8124413b272a48377058c4a.png\" alt=\"在这里插入图片描述\"><br>如果我们不看最后一个柔性数组成员，计算出来的结构体大小恰好是上面的结果，所以，当结构体里面含有柔性数组成员的时候，计算结构体大小时，是不会将柔性数组的大小计算在内的。</p>\n<h1 id=\"柔性数组的使用\"><a href=\"#柔性数组的使用\" class=\"headerlink\" title=\"柔性数组的使用\"></a>柔性数组的使用</h1><p>有了上面对柔性数组的认识，那么柔性数组是如何使用的呢？</p>\n<p> 上面说了要用malloc来为此开辟空间，并且开辟的空间的大小要大于所在结构体的大小。</p>\n<p>例子：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct s\n&#123;\n\tchar a;\n\tint b[]; &#x2F;&#x2F; 柔性数组\n&#125;* s; &#x2F;&#x2F; 创建结构体指针变量\n\nint main()\n&#123;                                 &#x2F;&#x2F; 这里是结构体的空间 &#x2F;&#x2F;这是柔性数组的空间：十个整型\n\tstruct s* tmp &#x3D; (struct s*)malloc(sizeof(struct s) + 40);\n\tif (tmp &#x3D;&#x3D; NULL)\n\t&#123;\n\t\tperror(&quot;malloc fail&quot;);\n\t\texit(-1);\n\t&#125;\n\ts &#x3D; tmp;\n\t\n\t&#x2F;&#x2F; 给柔性数组赋值\n\tfor (int i &#x3D; 0; i &lt; 10; i++)\n\t&#123;\n\t\ts-&gt;b[i] &#x3D; i + 1;\n\t&#125;\n\n\t&#x2F;&#x2F; 打印柔性数组的内容\n\tfor (int i &#x3D; 0; i &lt; 10; i++)\n\t&#123;\n\t\tprintf(&quot;%d &quot;, s-&gt;b[i]);\n\t&#125;\n\n\t&#x2F;&#x2F; 记得释放空间\n\tfree(s);\n\n\treturn 0;\n&#125;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/5a739bf4eb134e349a58083556b289d3.png\" alt=\"在这里插入图片描述\"><br>运行结果：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/0304a4bbb97442d6867a3fdabd1b89bd.png\" alt=\"在这里插入图片描述\"></p>\n<p>当然，如果需要给柔性数组扩容，可以用<code>realloc</code>进行以下操作(<code>核心代码</code>)：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">                                          &#x2F;&#x2F; 将柔性数组的空间增大到可以存储15个整型\nstruct s* cur &#x3D; (struct s*)realloc(s, sizeof(struct s) + 60);\nif (cur &#x3D;&#x3D; NULL)\n&#123;\n\tperror(&quot;realloc fail&quot;);\n\texit(-1);\n&#125;\ns &#x3D; cur;\n\n&#x2F;&#x2F; 给扩容的空间赋值\nfor (int i &#x3D; 10; i &lt; 15; ++i)\n&#123;\n\ts-&gt;b[i] &#x3D; i + 1;\n&#125;\n\n&#x2F;&#x2F; 打印柔性数组扩容后的内容\nfor (int i &#x3D; 0; i &lt; 15; i++)\n&#123;\n\tprintf(&quot;%d &quot;, s-&gt;b[i]);\n&#125;</code></pre>\n\n<p>运行结果：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/98874755d3434cb2b9a89312e167fa4d.png\" alt=\"在这里插入图片描述\"></p>\n<p>据此，柔性数组的使用掌握这些已经够用了，可以看到，柔性数组是可以随意更改数组大小的，“柔性”体现的淋漓尽致，不过一定要注意内存泄漏的问题。</p>\n<h1 id=\"柔性数组的优势\"><a href=\"#柔性数组的优势\" class=\"headerlink\" title=\"柔性数组的优势\"></a>柔性数组的优势</h1><p>学会了柔性数组的使用，实际上，上面实现的柔性数组的功能还可以这样设计：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct s\n&#123;\n\tchar b;\n\tint* a;\n&#125;s; &#x2F;&#x2F; typedef 重命名\n\nint main()\n&#123;\n\ts* stru;  &#x2F;&#x2F; 指向类型为s的结构体指针\n\ts* tmp1 &#x3D; (s*)malloc(sizeof(s));\n\tif (tmp1 &#x3D;&#x3D; NULL)\n\t&#123;\n\t\tperror(&quot;malloc fail&quot;);\n\t\texit(-1);\n\t&#125;\n\tstru &#x3D; tmp1;  &#x2F;&#x2F; 将开辟的结构体空间给给stru\n\tstru-&gt;b &#x3D; &#39;a&#39;;\n\t                &#x2F;&#x2F; 开辟可以存放十个整型的空间\n\tint* tmp2 &#x3D; (int*)malloc(sizeof(int) * 10);\n\tif (tmp2 &#x3D;&#x3D; NULL)\n\t&#123;\n\t\tperror(&quot;malloc fail&quot;);\n\t\texit(-1);\n\t&#125;\n\tstru-&gt;a &#x3D; tmp2; &#x2F;&#x2F; 将开辟的可以存放十个整型的空间给给stru指向的结构体里的整型指针\n\n\t&#x2F;&#x2F; 给a指向的空间赋值\n\tfor (int i &#x3D; 0; i &lt; 10; i++)\n\t&#123;\n\t\tstru-&gt;a[i] &#x3D; i + 1;\n\t&#125;\n\n\t&#x2F;&#x2F; 打印a指向的空间里的内容\n\tfor (int i &#x3D; 0; i &lt; 10; i++)\n\t&#123;\n\t\tprintf(&quot;%d &quot;, stru-&gt;a[i]);\n\t&#125;\n\n\t&#x2F;&#x2F; 别忘记释放噢,这里开辟了两次就要释放两次，并且要有里到外依次释放\n\tfree(stru-&gt;a);\n\tstru-&gt;a &#x3D; NULL;\n\tfree(stru);\n\tstru &#x3D; NULL;\n\n\treturn 0;\n&#125;</code></pre>\n\n<p><strong>柔性数组的使用那个设计放法与这个设计方法实现的效果是一样的，但是柔性数组的那个设计有两个好处：</strong></p>\n<ol>\n<li>方便内存释放：<br>可以看到第二个设计释放了两次，如果我们的代码是在一个给别人用的函数中，你在里面做了二次内存分配，并把整个结构体返回给用户。用户调用free可以释放结构体，但是用户并不知道这个结构体内的成员也需要free，所以你不能指望用户来发现这个事。所以，如果我们把结构体的内存以及其成员要的内存一次性分配好了，并返回给用户一个结构体指针，用户做一次free就可以把所有的内存也给释放掉。</li>\n<li>这样有利于访问速度：<br>连续的内存有益于提高访问速度，也有益于减少内存碎片。（其实，也没有高多少，反正你跑不了要用做偏移量的加法来寻址）</li>\n</ol>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>多学一些知识，在以后能用来解决问题的方法就更多，看完本篇文章，希望你能够理解柔性数组并且可以很好的使用。</p></blockquote>\n<p><strong>感谢阅读本小白的博客，错误的地方请严厉指出噢！</strong></p>\n","text":"前言 也许你从来就没有听过柔性数组（flexible array）这个概念，但他是真的存在； 柔性数组的概念存在于C99标准当中，C99标准表示：结构体的最后一个成员可以是一个大小不确定的数组，这个数组就叫做柔性数组; 既然搭配了柔性这一修饰词，那么这个数组就不会是”耿直“的了。...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":22,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":22,"path":"api/tags/C语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9F%94%E6%80%A7%E6%95%B0%E7%BB%84%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">柔性数组的特点</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9F%94%E6%80%A7%E6%95%B0%E7%BB%84%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">柔性数组的使用</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9F%94%E6%80%A7%E6%95%B0%E7%BB%84%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">柔性数组的优势</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E\"><span class=\"toc-text\">写在最后</span></a></li></ol>","author":{"name":"坏 幸 运","slug":"blog-author","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.0bab160015bf9e56450d5fded33bd448?rik=VFMstq3mAZG1pg&riu=http%3a%2f%2fwww.qzqn8.com%2fwp-content%2fuploads%2f2020%2f02%2f3-9.jpg&ehk=pnkhUlGCDYmxisEuCwYL4zXW92froAxt%2f0B5i9AYAkY%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"关于C语言对文件的操作","uid":"c2996624a24a0b1686f1aaf8ff1ca6e4","slug":"关于C语言对文件的操作","date":"2023-02-18T06:38:53.000Z","updated":"2023-02-18T06:40:40.114Z","comments":true,"path":"api/articles/关于C语言对文件的操作.json","keywords":null,"cover":"/photo/屏幕截图_20230218_121321.png","text":"前言 相信大家对文件都不陌生，我们在计算机的一系列操作都离不开文件，如果Linux没有了文件，那他就不叫Linux了，有了文件，我们的计算机才能够正常运行，有了文件我们才能够在计算机上写东西并能够帮我们保存下来。 C语言也提供了一系列的函数来操控文件，本篇文章只介绍那些常见和常用...","link":"","photos":[],"count_time":{"symbolsCount":"9.8k","symbolsTime":"9 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":22,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":22,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.0bab160015bf9e56450d5fded33bd448?rik=VFMstq3mAZG1pg&riu=http%3a%2f%2fwww.qzqn8.com%2fwp-content%2fuploads%2f2020%2f02%2f3-9.jpg&ehk=pnkhUlGCDYmxisEuCwYL4zXW92froAxt%2f0B5i9AYAkY%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},"next_post":{"title":"关于C语言atoi函数的解析使用与自我实现","uid":"81fc7805ca264e2858b2ea302671831d","slug":"关于C语言atoi函数的解析使用与自我实现","date":"2023-02-18T06:24:52.000Z","updated":"2023-02-18T06:26:42.649Z","comments":true,"path":"api/articles/关于C语言atoi函数的解析使用与自我实现.json","keywords":null,"cover":"/photo/202322.jpg","text":"前言 对于atoi函数大家可能会有些陌生，不过当你选择并阅读到这里时，请往下阅读，我相信你能对atoi函数熟悉 该函数的头文件为 &lt;stdlib.h&gt; 或 &lt;cstdlib&gt; atoi函数的介绍此函数的功能是将数字字符的字符串转化为字面上的整型返回，例如：...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":22,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":22,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.0bab160015bf9e56450d5fded33bd448?rik=VFMstq3mAZG1pg&riu=http%3a%2f%2fwww.qzqn8.com%2fwp-content%2fuploads%2f2020%2f02%2f3-9.jpg&ehk=pnkhUlGCDYmxisEuCwYL4zXW92froAxt%2f0B5i9AYAkY%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}}}