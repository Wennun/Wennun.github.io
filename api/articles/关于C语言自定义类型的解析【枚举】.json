{"title":"关于C语言自定义类型的解析【枚举】","uid":"2a6f3763c677ea77f93b81ce5ed42b63","slug":"关于C语言自定义类型的解析【枚举】","date":"2023-02-18T06:03:06.000Z","updated":"2023-02-18T06:09:30.560Z","comments":true,"path":"api/articles/关于C语言自定义类型的解析【枚举】.json","keywords":null,"cover":"/photo/屏幕截图_20230122_044410.png","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>枚举在我们平时练习或学习的时候可能不是很常用，但是其在工程项目里，还是比较常见的，因为他能起到优化用。并且，有时我们在写题的时候，也会运用到枚举的思想。</p></blockquote>\n<h1 id=\"枚举的介绍\"><a href=\"#枚举的介绍\" class=\"headerlink\" title=\"枚举的介绍\"></a>枚举的介绍</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>枚举顾名思义就是 一 一 列举。把可能的取值 一 一 列举。</p></blockquote>\n<p>比如我们现实生活中：<br>1.一个星期从星期一到星期天的有限的7天可以 一 一 列举。<br>2.月份从1月到12月也可以 一 一 列举出来。<br>3.颜色分红黄蓝绿蓝靛紫几种颜色，也可以 一 一 列举出来。</p>\n<h1 id=\"枚举类型的定义\"><a href=\"#枚举类型的定义\" class=\"headerlink\" title=\"枚举类型的定义\"></a>枚举类型的定义</h1><p><strong>直接上代码（注意观察语法形式）：</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;&#x2F; enum var_name  这个就是枚举类型\nenum Sex  &#x2F;&#x2F; 枚举性别\n&#123;\n\tMAN, &#x2F;&#x2F; 男人   \n\tWOMAN  &#x2F;&#x2F; 女人\n\t&#x2F;&#x2F; 当然也有可能是人妖\n&#125;;\n\nenum Day  &#x2F;&#x2F; 枚举星期\n&#123;\t\n\tMon,  &#x2F;&#x2F; 注意这里是逗号\n\tTues,\n\tWed,\n\tThur,\n\tFri,\n\tSat,\n\tSun  &#x2F;&#x2F; 最后一个后面什么符号也不用打\n&#125;;  &#x2F;&#x2F; 这里必须要有分号\n\nenum Color\n&#123;\n\tRED,\n\tGREEN,\n\tBLUE\n&#125;;</code></pre>\n\n<p><strong>当然，既然是类型，那么也可以使用<code>typedef</code>起别名：</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">typedef enum Color\n&#123;\n\tRED,\n\tGREEN,\n\tBLUE\n&#125;Clr;  &#x2F;&#x2F; 将 enum Color 类型名 简化成 Clr</code></pre>\n\n\n<p>1.以上定义的<code>enum Day</code>，<code>enum Sex</code>，<code>enum Color</code>都是枚举类型。</p>\n<p>2.<code>&#123;&#125;</code>中的内容是枚举类型的可能取值，也叫枚举常量。</p>\n<p>3.这些可能取值都是有值的，默认从<code>0</code>开始，依次递增<code>1</code>,例如：上面的<code>RED</code>可以看作<code>0</code>，<code>GREEN</code>可以看作<code>1</code>，<code>BLUE</code>可以看作<code>2</code>。</p>\n<p>4.当然在定义的时候也可以赋初值。例如：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">enum Color&#x2F;&#x2F;颜色\n&#123;\n\tRED &#x3D; 1,\n\tGREEN &#x3D; 2,\n\tBLUE &#x3D; 4\n&#125;;</code></pre>\n<p><strong>而如果是这样赋值：</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">enum Day  &#x2F;&#x2F; 枚举星期\n&#123;\t\n\tMon, \n\tTues,\n\tWed,\n\tThur &#x3D; 10,\n\tFri,\n\tSat,\n\tSun  \n&#125;;</code></pre>\n<ul>\n<li><strong>那也就意味着从<code>Mon</code>到<code>Wed</code>是由<code>0</code>开始依次递增（<code>Mon = 0， Tuse = 1， Wed = 2</code>），从<code>Thur</code>到<code>Sun</code>是由<code>10</code>开始依次递增（<code>Thur = 10， Fri = 11， Sat = 12， Sun = 13</code>）。</strong></li>\n</ul>\n<h1 id=\"枚举的优点\"><a href=\"#枚举的优点\" class=\"headerlink\" title=\"枚举的优点\"></a>枚举的优点</h1><ul>\n<li><strong>为什么使用枚举?</strong> </li>\n<li><strong>我们可以使用 #define 定义常量，为什么非要使用枚举？</strong></li>\n</ul>\n<p>原因：</p>\n<ol>\n<li>增加代码的可读性和可维护性。</li>\n<li>和#define定义的标识符比较枚举有类型检查，更加严谨。</li>\n<li>防止了命名污染（封装）。</li>\n<li>便于调试。</li>\n<li>使用方便，一次可以定义多个常量。</li>\n</ol>\n<ul>\n<li><strong>我们可以去看很多项目的源码，会发现，里面很多用枚举来定义常量。</strong></li>\n</ul>\n<h1 id=\"枚举的使用\"><a href=\"#枚举的使用\" class=\"headerlink\" title=\"枚举的使用\"></a>枚举的使用</h1><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">enum Color&#x2F;&#x2F;颜色\n&#123;\n\t RED &#x3D; 1,\n\t GREEN &#x3D; 2,\n\t BLUE &#x3D; 4\n&#125;;\n\n&#x2F;&#x2F; 只能拿枚举常量给枚举变量赋值，才不会出现类型的差异。\nenum Color clr &#x3D; GREEN;\n\nclr &#x3D; 5;</code></pre>\n\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>虽然在现在阶段我们很难体会到枚举的好处，但是我们可以多去看看别人的代码，多去领悟一下枚举到底有什么用？这样我们使用起来也才会得心应手。</p></blockquote>\n<p><strong>感谢阅读本小白的博客，错误的地方请严厉指出噢！</strong></p>\n","text":"前言 枚举在我们平时练习或学习的时候可能不是很常用，但是其在工程项目里，还是比较常见的，因为他能起到优化用。并且，有时我们在写题的时候，也会运用到枚举的思想。 枚举的介绍 枚举顾名思义就是 一 一 列举。把可能的取值 一 一 列举。 比如我们现实生活中：1.一个星期从星期一到星期...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9E%9A%E4%B8%BE%E7%9A%84%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">枚举的介绍</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">枚举类型的定义</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9E%9A%E4%B8%BE%E7%9A%84%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">枚举的优点</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9E%9A%E4%B8%BE%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">枚举的使用</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E\"><span class=\"toc-text\">写在最后</span></a></li></ol>","author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"关于C语言自定义类型的解析【联合体(共用体)】","uid":"77f0175d7a55a3daaea7f2a65478b692","slug":"关于C语言自定义类型的解析【联合体-共用体-】","date":"2023-02-18T06:10:00.000Z","updated":"2023-02-18T06:12:40.980Z","comments":true,"path":"api/articles/关于C语言自定义类型的解析【联合体-共用体-】.json","keywords":null,"cover":"/photo/屏幕截图_20230122_043346.png","text":"前言 联合体（union）在C语言中是不常用的，不过存在就必然有其有用之处，这里不深入探讨联合体用在何处有什么用，本文章只介绍关于union的基本知识。 联合体(UNION)类型的定义 联合体也是一种特殊的自定义类型, 这种类型定义的变量也包含一系列的成员，特征是这些成员共用同一...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},"next_post":{"title":"关于C语言自定义类型的解析【结构体】","uid":"4134eec542bd62238a7d449186ff9c26","slug":"关于C语言自定义类型的解析【结构体】","date":"2023-02-18T04:17:55.000Z","updated":"2023-02-18T04:21:27.872Z","comments":true,"path":"api/articles/关于C语言自定义类型的解析【结构体】.json","keywords":null,"cover":"/photo/屏幕截图_20230122_043921.png","text":"前言 C语言中结构体是一种用户自定义的数据类型，它相当于一个小型的数据结构，当我们在学数据结构阶段的时候，结构体的运用很常见，所以，基本的结构体的定义和使用，以及结构体大小的计算务必掌握。 结构体类型的声明 结构体的基础知识： 结构是一些值的集合，这些值称为成员变量。结构的每个成...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":23,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":23,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}}}