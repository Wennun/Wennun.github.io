{"title":"一文带你灵活使用C语言的数组","uid":"b82bfb4a02f130e6ce0f96366fdc8a1f","slug":"一文带你灵活使用C语言的数组","date":"2023-02-17T14:38:44.000Z","updated":"2023-02-17T15:31:46.258Z","comments":true,"path":"api/articles/一文带你灵活使用C语言的数组.json","keywords":null,"cover":[],"content":"<h1 id=\"一-什么是数组？\"><a href=\"#一-什么是数组？\" class=\"headerlink\" title=\"一. 什么是数组？\"></a>一. 什么是数组？</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>数组是由数据类型相同的一系列元素组成的。需要使用数组时，通过声明数组告诉编译器数组中内含多少元素和这些元素的类型。编译器根据这些信息正确的创建数组。普通变量可以使用的类型，数组元素都可以使用。</li>\n</ul></blockquote>\n<h1 id=\"二-一维数组\"><a href=\"#二-一维数组\" class=\"headerlink\" title=\"二. 一维数组\"></a>二. 一维数组</h1><h2 id=\"1-一维数组的创建和初始化\"><a href=\"#1-一维数组的创建和初始化\" class=\"headerlink\" title=\"1. 一维数组的创建和初始化\"></a>1. 一维数组的创建和初始化</h2><h3 id=\"1-1-一维数组的创建\"><a href=\"#1-1-一维数组的创建\" class=\"headerlink\" title=\"1.1. 一维数组的创建\"></a>1.1. 一维数组的创建</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int arr[4];</code></pre>\n<p>上面便创建了一个整型数组：</p>\n<ul>\n<li>int 是数组的类型，在这里是整型。</li>\n<li>arr 是数组名。</li>\n<li>[] 是下标引用操作符也是数组的标志，这里我们在里面给上一个4，代表一个数组名为arr的整型数组里面放了四个元素。</li>\n</ul>\n<p><strong>值得注意的是，我们在定义数组时，[] 里的必须是一个常量表达式（const），这是C99标准之前规定的。也就是说，如果我们在前面创建一个整型变量给个初始值10，在创建数组时[]里放的是这个整型变量的变量名，这样编译器会报错，在语法上也是不支持的（C99标准之前）。</strong></p>\n<p>当然，我们还可以用宏定义一个常量来作为数组[]里的表达式从而创建一个数组：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\n#define num 100 \n\nint main()\n&#123;\n\tint arr[num]; &#x2F;&#x2F; 这里是支持这样去创建的\n\n\treturn 0;\n&#125;</code></pre>\n\n\n<h3 id=\"1-2-一维数组的初始化\"><a href=\"#1-2-一维数组的初始化\" class=\"headerlink\" title=\"1.2. 一维数组的初始化\"></a>1.2. 一维数组的初始化</h3><ul>\n<li>首先我们要知道什么是数组的初始化？也就是说，在我们创建了一个数组后，给数组一个{0}，或者把这个数组填满，这都可以算作数组初始化。</li>\n<li>我还是建议大家在创建一个数组后能够给数组初始化，这样在后面使用时，就不会出现一些奇奇怪怪的值。这是因为，当你在给一个元素个数为4的整型数组初始化{0}后，你去打印这个数组，他会默认你这数组的四个元素都为0，不然就是一些很奇怪的随机值。</li>\n<li>如果不指定数组大小而给数组某些值，那么这个数组的大小会根据你给的这些值的个数来确定。</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint arr[4] &#x3D; &#123; 0 &#125;;\n\n\treturn 0;\n&#125;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/39c5036c01f0438187a68c36e405dfcb.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>如果一个整型数组它初始化不完全，那么没初始化的元素他也会默认为零：</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int main()\n&#123;\n\tint arr[4] &#x3D; &#123; 1 ,2 &#125;;\n\n\treturn 0;\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/87baa03e2159442ebe1849eb2d6ac49e.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>当然，其它类型的初始化也是一样（char等）。</li>\n</ul>\n<h2 id=\"2-一维数组的使用\"><a href=\"#2-一维数组的使用\" class=\"headerlink\" title=\"2. 一维数组的使用\"></a>2. 一维数组的使用</h2><ul>\n<li>这里首先讲解一下[]操作符，它名为下标引用操作符。在创建一个数组时，它是数组的标志，也起定义数组大小的作用。在使用一个数组时，他的作用便是下标引用了。值得注意的是，数组的下标是这个元素从左往右数的位数减一，也就是说数组的下标是从零开始的，第一个元素的下标为0，第二个元素的下标为1，以此类推。所以我们在使用数组时，一定要注意下标的使用是否正确，避免出现数组下标越界的问题。</li>\n</ul>\n<p>以下是一维数组的初级使用（创建—打印）：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint arr[4] &#x3D; &#123; 1, 2, 3 ,4 &#125;;\n\tint i &#x3D; 0;\n\tint sz &#x3D; sizeof(arr) &#x2F; sizeof(arr[0]);\n\n\tfor (i &#x3D; 0; i &lt; sz; i++)\n\t&#123;\n\t\tprintf(&quot;%d&quot;, arr[i]);\n\t&#125;\n\n\treturn 0;\n&#125;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/d36265012fab49b8b4b97c648710751d.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>我们可以看到，打印一维数组时用了一个循环。</li>\n<li>上述代码中使用了sizeof来求数组的长度，sizeof其实是求数组字节的大小，一个整型为4个字节，而数组arr里有4个整型，那么大小为16，后面除上这个数组的第一个元素的字节大小（4），结果为4，这样求数组大小可以避免一些数组元素过多的问题。并且数组的长度计算还会在你改变这个数组时而改变，可以说非常方便，这是一个常用的求数组长度的方法，希望大家牢记。</li>\n</ul>\n<h2 id=\"3-一维数组在内存中的存储\"><a href=\"#3-一维数组在内存中的存储\" class=\"headerlink\" title=\"3.一维数组在内存中的存储\"></a>3.一维数组在内存中的存储</h2><ul>\n<li>一维数组在内存中的存储是连续的，地址由低到高，这里放段代码来展示其效果：</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint arr[4] &#x3D; &#123; 1, 2, 3, 4 &#125;;\n\tint i &#x3D; 0;\n\tint sz &#x3D; sizeof(arr) &#x2F; sizeof(arr[0]);\n\n\tfor (i &#x3D; 0; i &lt; sz; i++)\n\t&#123;\n\t\tprintf(&quot;&amp;arr[%d] &#x3D; %p\\n&quot;, i， &amp;arr[i]);\n\t&#125;\n\n\treturn 0;\n&#125;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/02ea46b728fb4b74b04358565a555517.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>我们可以看到，这四个元素的地址是连续的，他们之间相差4，是因为一个整型为四个字节，当一个整型值在内存中存储时，内存会开辟四个单元空间（每个单元为一个字节并且对应一个地址）用来存放这个整型值，所以在一个整型数组中也是如此，他们每个整型元素相差4。</li>\n</ul>\n<h1 id=\"三-二维数组\"><a href=\"#三-二维数组\" class=\"headerlink\" title=\"三. 二维数组\"></a>三. 二维数组</h1><h2 id=\"1-二维数组的创建和初始化\"><a href=\"#1-二维数组的创建和初始化\" class=\"headerlink\" title=\"1. 二维数组的创建和初始化\"></a>1. 二维数组的创建和初始化</h2><h3 id=\"1-1-二维数组的创建\"><a href=\"#1-1-二维数组的创建\" class=\"headerlink\" title=\"1.1. 二维数组的创建\"></a>1.1. 二维数组的创建</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int arr[2][3];</code></pre>\n<ul>\n<li>上面便创建了一个二维数组，它形式上就是比一维数组多了一个[]。</li>\n<li>这里直接说明，二维数组和一维数组的通性是一样的，上述arr[2][3]，通俗来说，2表示这个二维数组有两行（两条），3表示每一行（每一条）有几列（也就是几个元素），所以我们可以认为，arr[2][3]其实就是由两个arr[3]构成的。所以我们说二维数组其实就是一维数组。</li>\n</ul>\n<h3 id=\"1-2-二维数组的初始化\"><a href=\"#1-2-二维数组的初始化\" class=\"headerlink\" title=\"1.2. 二维数组的初始化\"></a>1.2. 二维数组的初始化</h3><ul>\n<li>二维数组的初始化与一维数组的初始化大同小异，但二维数组它是分行和列的，因此二维数组的初始化又有不同。</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int arr[2][3] &#x3D; &#123; &#123;1,2,3 &#125;, &#123;4, 5, 6&#125; &#125;;\n</code></pre>\n<p>a.这里函数大小与初始化大小相同，所以这段代码表示第一个大括号表示为数组的第一行，第二个大括号表示为数组的第二行，而这里只有两行，其中每一行有三个元素（每行三列）。这是最为正确且直观的初始化方式。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int arr[2][3] &#x3D; &#123; 1,2,3,4,5,6 &#125;;\n</code></pre>\n<p>b.这里没有打大括号,但其与a展现的效果是相同的，他会自动将数组的前三个元素作为第一行，后三个元素最为第二行，这样不是很好读。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int arr[2][3] &#x3D; &#123; 1,2,4,5,6 &#125;;\n</code></pre>\n<p>c.这段代码数组初始化的元素个数就少于整个数组的元素个数的大小了，所以前三个元素还是默认第一行，后两个元素默认第二行，但最后一个没给的值默认为零（没有大括号的情况）。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int arr[2][3] &#x3D; &#123; &#123;1,2 &#125;, 4, 5, 6 &#125;;\n</code></pre>\n<p>d.这里给了大括号之后，则前面两个元素为第一行，后三个为第二行。当在打印数组内容时，第一行空缺的元素会默认为零打印。</p>\n<ul>\n<li>值得注意的是，二维数组在初始化的时候，行可以省略，但列不能省略，因为由列可以确定你这一行，而行缺失了列的限制就无从初始化了。</li>\n</ul>\n<h2 id=\"2-二维数组的使用\"><a href=\"#2-二维数组的使用\" class=\"headerlink\" title=\"2. 二维数组的使用\"></a>2. 二维数组的使用</h2><p>先展示代码来表达效果：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint arr[2][3] &#x3D; &#123; &#123;1,2 &#125;, 4, 5, 6 &#125;;\n\tint i &#x3D; 0;\n\tint j &#x3D; 0;\n\n\tfor (i &#x3D; 0; i &lt; 2; i++) &#x2F;&#x2F; 打印每行\n\t&#123;\n\t\tfor (j &#x3D; 0; j &lt; 3; j++) &#x2F;&#x2F; 打印这一行的每一列\n\t\t&#123;\n\t\t\tprintf(&quot;%d &quot;, arr[i][j]);\n\t\t&#125;\n\t\tprintf(&quot;\\n&quot;); &#x2F;&#x2F; 每打印一行换行\n\t&#125;\n\n\treturn 0;\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/1dad9e0b7c514e87b773e58d4bfd4239.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>我们可以看到，打印一个二维数组要用到两个循环（循环之间为嵌套关系），使用二维数组可以达到一个版面的效果，在前面三子棋和扫雷的使用效果会更明显。</p>\n<h2 id=\"3-二维数组在内存中的存储\"><a href=\"#3-二维数组在内存中的存储\" class=\"headerlink\" title=\"3. 二维数组在内存中的存储\"></a>3. 二维数组在内存中的存储</h2><ul>\n<li>我们说二维数组其实就是由一维数组构成的，所以二维数组在内存中的储存，可以说几乎与一位数组相同。</li>\n<li>二维数组在内存中的储存也是连续的，他每一行的地址紧跟在前一行的地址后面，地址由低到高：<br><img src=\"https://img-blog.csdnimg.cn/18ed126bfb1f4f30b7b8eb85ea5d70b6.png#pic_center\" alt=\"在这里插入图片描述\"></li>\n</ul>\n<h1 id=\"四-多维数组\"><a href=\"#四-多维数组\" class=\"headerlink\" title=\"四. 多维数组\"></a>四. 多维数组</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>前面讨论的二维数组的相关内容都适用于三维数组或者更多维的数组。可以这样声明一个三维数组int arr[10][20][30];</li>\n<li>我们可以把一维数组想象成一行数据，把二维数组想象成数据表，把三维数组想象成一叠数据表。例如，把上面声明的三维数组arr想象成由10个二维数组（每个二维数组都是20行30列）堆叠起来。</li>\n<li>还有一种理解arr的方法是，把arr看作数组的数据。也就是说，arr内含10个元素，每个元素是内含20个元素的数组，这20个数组元素中的每个元素是内含30个元素的数组。或者，可以简单地根据所需的下标值去理解数组。</li>\n<li>通常，处理三维数组要使用3重嵌套循环，处理四维数组要使用4重嵌套循环。对于其它多维数组，以此类推。一般来说，我们只会使用到二维数组。</li>\n</ul></blockquote>\n<p>———————————————————《C primer plus》</p>\n<h1 id=\"五-数组和指针（初级）\"><a href=\"#五-数组和指针（初级）\" class=\"headerlink\" title=\"五. 数组和指针（初级）\"></a>五. 数组和指针（初级）</h1><h2 id=\"1-1-指针在数组中的使用\"><a href=\"#1-1-指针在数组中的使用\" class=\"headerlink\" title=\"1.1. 指针在数组中的使用\"></a>1.1. 指针在数组中的使用</h2><ul>\n<li><p>指针是提供一种以符号形式使用地址方法，因为计算机的硬件指令非常依赖地址，指针在某种程度上把程序员想要传达的指令以更接近机器的方式表达。因此，使用指针的程序更有效率。尤其是，指针能有效地处理数组。数组表示法其实是在变相地使用指针。</p>\n</li>\n<li><p>数组名其实就是首元素的地址，&amp;arr[0]与arr的效果相同,但&amp;arr与他俩又不相同，他是整个数组的地址，下面是代码的展示效果：</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint arr[] &#x3D; &#123; 1,2,3,4,5 &#125;;\n\tprintf(&quot;%p\\n&quot;, arr);\n\tprintf(&quot;%p\\n&quot;, &amp;arr[0]);\n\tprintf(&quot;%p\\n&quot;, &amp;arr);\n\tprintf(&quot;\\n&quot;);\n\tprintf(&quot;%p\\n&quot;, arr + 1); &#x2F;&#x2F; 数组名+1\n\tprintf(&quot;%p\\n&quot;, &amp;arr[1]); &#x2F;&#x2F; 第二个元素的地址\n\tprintf(&quot;%p\\n&quot;, &amp;arr + 1); &#x2F;&#x2F; 整个数组地址+1\n\n\treturn 0;\n&#125;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/0f2cb45cb21e45f0924ff419d5b8f3b9.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>我们可以看到（&amp;arr + 1）它跳过的是整个数组的地址，而（arr + 1）只数组中第二个元素的地址。</p>\n<ul>\n<li>以下是指针在数组中的具体的使用：</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main()\n&#123;\n\tint arr1[] &#x3D; &#123; 1,2,3,4 &#125;;\n\tchar arr2[] &#x3D; &quot;abcd&quot;;\n\tint i &#x3D; 0;\n\n\tint sz1 &#x3D; sizeof(arr1) &#x2F; sizeof(arr1[0]);\n\tint sz2 &#x3D; strlen(arr2);\n\n\tint* p1 &#x3D; arr1;\n\tchar* p2 &#x3D; arr2;\n\n\tfor (i &#x3D; 0; i &lt; sz1; i++)\n\t&#123;\n\t\tprintf(&quot;%d &quot;, *p1 + i); &#x2F;&#x2F; 解引用操作找到对应元素打印\n\t&#125;\n\n\tprintf(&quot;\\n&quot;);\n\n\tfor (i &#x3D; 0; i &lt; sz2; i++)\n\t&#123;\n\t\tprintf(&quot;%c &quot;, *p2 + i);\n\t&#125;\n\n\treturn 0;\n&#125;</code></pre>\n\n<p>运行结果：<br><img src=\"https://img-blog.csdnimg.cn/81bcd1818a1e4d31a1b00098d1a0faf8.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"1-2-函数，数组与指针\"><a href=\"#1-2-函数，数组与指针\" class=\"headerlink\" title=\"1.2. 函数，数组与指针\"></a>1.2. 函数，数组与指针</h2><ul>\n<li>当我们在调用函数时，想传递一个数组过去，我们直接传递数组名就行了，因为数组名就是数组首元素的地址，所以当函数接受时需要一个指针来接收传递过来的地址，值得注意的是，在函数接受时，用类型加数组而不用指针也是可以的，这两个的效果是相同的，例：</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nvoid print(int* arr, int sz)\n&#123;\n\tint i &#x3D; 0;\n\tfor (i &#x3D; 0; i &lt; sz; i++)\n\t&#123;\n\t\tprintf(&quot;%d &quot;, arr[i]);\n\t&#125;\n&#125;\n\nint main()\n&#123;\n\tint arr[] &#x3D; &#123; 1,2,3,4,5 &#125;;\n\tint sz &#x3D; sizeof(arr) &#x2F; sizeof(arr[0]);\n\tprint(arr, sz);\n\n\treturn 0;\n&#125;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/7afe3f2bf8244aff97fb6997c6cca373.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nvoid print(int arr[], int sz)\n&#123;\n\tint i &#x3D; 0;\n\tfor (i &#x3D; 0; i &lt; sz; i++)\n\t&#123;\n\t\tprintf(&quot;%d &quot;, arr[i]);\n\t&#125;\n&#125;\n\nint main()\n&#123;\n\tint arr[] &#x3D; &#123; 1,2,3,4,5 &#125;;\n\tint sz &#x3D; sizeof(arr) &#x2F; sizeof(arr[0]);\n\tprint(arr, sz);\n\n\treturn 0;\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/8c8a0e71893e4aceafc200795181fd45.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>可以看到， 函数形参接受时的两种方式是等效的。</p>\n<h1 id=\"六-变长数组概述\"><a href=\"#六-变长数组概述\" class=\"headerlink\" title=\"六. 变长数组概述\"></a>六. 变长数组概述</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>变长数组实际上就是数组[]里可以放变量表达式，在Linux环境下gcc可以使用，不过要注意的是，这样创建一个数组是不能初始化的。当然支持C99标准的编译器底下也可以这样使用。</li>\n</ul></blockquote>\n<h1 id=\"七-总结\"><a href=\"#七-总结\" class=\"headerlink\" title=\"七. 总结\"></a>七. 总结</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>数组的灵活运用可以高效地解决一些比较困难的问题，它可以很好地训练我们的编程思维。</li>\n<li>我们在使用数组时最好是要运用指针来操作，这样程序会更高效，占用内存会更少。</li>\n</ul></blockquote>\n","text":"一. 什么是数组？ 数组是由数据类型相同的一系列元素组成的。需要使用数组时，通过声明数组告诉编译器数组中内含多少元素和这些元素的类型。编译器根据这些信息正确的创建数组。普通变量可以使用的类型，数组元素都可以使用。 二. 一维数组1. 一维数组的创建和初始化1.1. 一维数组的创建...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"C语言","slug":"C语言","count":10,"path":"api/tags/C语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80-%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E7%BB%84%EF%BC%9F\"><span class=\"toc-text\">一. 什么是数组？</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C-%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">二. 一维数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">1. 一维数组的创建和初始化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">1.1. 一维数组的创建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">1.2. 一维数组的初始化</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2. 一维数组的使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">3.一维数组在内存中的存储</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">三. 二维数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">1. 二维数组的创建和初始化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">1.1. 二维数组的创建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">1.2. 二维数组的初始化</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2. 二维数组的使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">3. 二维数组在内存中的存储</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B-%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">四. 多维数组</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%94-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%EF%BC%88%E5%88%9D%E7%BA%A7%EF%BC%89\"><span class=\"toc-text\">五. 数组和指针（初级）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E6%8C%87%E9%92%88%E5%9C%A8%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">1.1. 指针在数组中的使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E5%87%BD%E6%95%B0%EF%BC%8C%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E9%92%88\"><span class=\"toc-text\">1.2. 函数，数组与指针</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%AD-%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">六. 变长数组概述</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%83-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">七. 总结</span></a></li></ol>","author":{"name":"坏 幸 运","slug":"blog-author","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.0bab160015bf9e56450d5fded33bd448?rik=VFMstq3mAZG1pg&riu=http%3a%2f%2fwww.qzqn8.com%2fwp-content%2fuploads%2f2020%2f02%2f3-9.jpg&ehk=pnkhUlGCDYmxisEuCwYL4zXW92froAxt%2f0B5i9AYAkY%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"关于C语言常见操作符的解析和使用","uid":"dafd374449017f7aa00611ca0f3662e1","slug":"关于C语言常见操作符的解析和使用","date":"2023-02-17T14:40:44.000Z","updated":"2023-02-17T15:32:02.781Z","comments":true,"path":"api/articles/关于C语言常见操作符的解析和使用.json","keywords":null,"cover":[],"text":"前言 我们在学习C语言时肯定会用到不同的操作符来完成我们的功能，本章便是这些操作符的介绍与具体使用。 1. 算数操作符 算数操作符有四种，他们分别为： 加 “**+”，减 “-”，乘 “ * ”，除 “&#x2F;”， 取模 “%**” 值得注意的是,在C语言中乘号用 “ * “...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"C语言","slug":"C语言","count":10,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.0bab160015bf9e56450d5fded33bd448?rik=VFMstq3mAZG1pg&riu=http%3a%2f%2fwww.qzqn8.com%2fwp-content%2fuploads%2f2020%2f02%2f3-9.jpg&ehk=pnkhUlGCDYmxisEuCwYL4zXW92froAxt%2f0B5i9AYAkY%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},"next_post":{"title":"使用C语言实现初级扫雷小游戏","uid":"fc86da1651adc032c38c6b773ee69698","slug":"使用C语言实现初级扫雷小游戏","date":"2023-02-17T14:37:11.000Z","updated":"2023-02-17T15:57:58.219Z","comments":true,"path":"api/articles/使用C语言实现初级扫雷小游戏.json","keywords":null,"cover":"/photo/p3.png","text":"一. 前言 本章我们用C语言简单实现一个9×9雷阵的扫雷小游戏。 说到扫雷想必大家都不陌生，开始我们点击一个小方块，那么这个小方块上会显示它周围八个小方块里雷的个数，凭借这个数值，在判断下一个要扫的位置（当然可能前面两步需要我们的幸运成分了），当我们除雷外的所有小方块都已经显示完...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"C语言","slug":"C语言","count":10,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.0bab160015bf9e56450d5fded33bd448?rik=VFMstq3mAZG1pg&riu=http%3a%2f%2fwww.qzqn8.com%2fwp-content%2fuploads%2f2020%2f02%2f3-9.jpg&ehk=pnkhUlGCDYmxisEuCwYL4zXW92froAxt%2f0B5i9AYAkY%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}}}