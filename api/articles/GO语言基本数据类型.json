{"title":"GO语言基本数据类型","uid":"43e2ee3df951b9743f1edd51428d3b1f","slug":"GO语言基本数据类型","date":"2023-02-18T03:54:57.000Z","updated":"2023-02-18T03:56:21.159Z","comments":true,"path":"api/articles/GO语言基本数据类型.json","keywords":null,"cover":"/photo/p7.jpg","content":"<h1 id=\"1-整数类型\"><a href=\"#1-整数类型\" class=\"headerlink\" title=\"1.整数类型\"></a>1.整数类型</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>整数类型就是存放整数的，如<code>18</code> ，<code>-18</code>，<code>123534</code>等，在GO语言中，几乎不同于其它语言，以字节的视角来看其int类型还分为不同的int表达，首先int还要分为两大类。</p></blockquote>\n<h2 id=\"1-1-有符号整数类型\"><a href=\"#1-1-有符号整数类型\" class=\"headerlink\" title=\"1.1.有符号整数类型\"></a>1.1.有符号整数类型</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>有符号就是整数有正负之分</p></blockquote>\n<p>我们来看下图：<br><img src=\"https://img-blog.csdnimg.cn/fdf016c9348349b9a92cb2da67b45bcc.png#pic_center\" alt=\"在这里插入图片描述\"><br>可以看到，这4个int后面都带了数字，这其实就是这个int类型占用内存最大的比特位，比如int8，就是这个int类型最大只能占用8个比特位，也就是一个字节（1个字节 &#x3D;&#x3D; 8个比特位），其他的int也是这样来看的，这中分类也就确定了各个int的表数范围，所以我们在定义一个整型值使，要估摸这个整型值的范围，再来确定使用哪个int的类型。 </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>我们可以看看这些表示int的类型其大小是不是如此呢？</li>\n</ul></blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\nimport (\n\t&quot;fmt&quot;\n\t&quot;unsafe&quot;\n)\n\nfunc main()&#123;\n\tvar num1 int8\n\tfmt.Println(unsafe.Sizeof(num1))\n\tvar num2 int16\n\tfmt.Println(unsafe.Sizeof(num2))\n\tvar num3 int32\n\tfmt.Println(unsafe.Sizeof(num3))\n\tvar num4 int64 \n\tfmt.Println(unsafe.Sizeof(num4))\n&#125;</code></pre>\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/dc2c7c353d054019a26dc7fe31fae32a.png\" alt=\"在这里插入图片描述\"></p>\n<p>可以看到，不同的int类型其字节大小的确不同。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>如果说int类型赋值不当就会出现如下的错误：</li>\n</ul></blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\nimport &quot;fmt&quot;\n\nfunc main()&#123;\n\tvar num1 int8 &#x3D; 666 &#x2F;&#x2F; int8 不能承受666这个值\n\tfmt.Println(num1)\n&#125;</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/c19c37884f9a4cb59750accb58b6b8e7.png#pic_center\" alt=\"在这里插入图片描述\"><br>也就是说<code>666</code>不能作为值赋给<code>int8</code>，不然编译就会出问题，应该使用更高存储字节空间的int类型来存放。</p>\n<h2 id=\"1-2-无符号整数类型\"><a href=\"#1-2-无符号整数类型\" class=\"headerlink\" title=\"1.2.无符号整数类型\"></a>1.2.无符号整数类型</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>无符号整数类型就是没有负数之说只有整正数（没有符号位）</p></blockquote>\n<p>我们来看下图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/a917165dbe4942ddb276398746a415b3.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>可以看到，无符号整数类型在有符号整数类型int的前面多了一个<code>u</code>，这就是表示无符号的意思，值得注意的是，其占用储存空间的字节大小没有变化，但表数范围变了，变得没有负数了，最大值更大了，这就是无符号整型的优势，如果你想表达的数据咬定没有负数，那么选无符号整型类型会更好些（如表示身高，年龄）。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>当然，如果用无符号整型取存放负数，这也是会严格的报错的</li>\n</ul></blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/7db64861f5364388b0e72d4c9a69161e.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"1-3-其他整数类型\"><a href=\"#1-3-其他整数类型\" class=\"headerlink\" title=\"1.3.其他整数类型\"></a>1.3.其他整数类型</h2><p>我们来看下图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/8ddab23b82d74d11bf41d45725822720.png\" alt=\"在这里插入图片描述\"><br>可以看到，<code>int</code>和<code>uint</code>他们的字节大小是由计算机系统的位数来决定的，rune就相当于<code>int32</code>，<code>byte</code>相当于<code>uint8</code>（在后面<code>byte</code>可以<code>用作字符</code>的类型）。</p>\n<p>定义如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\nimport &quot;fmt&quot;\n\nfunc main()&#123;\n\tvar a int &#x3D; 3\n\tvar b uint &#x3D; 5\n\tvar c rune &#x3D; 10\n\tvar d byte &#x3D; 20\n\tvar e byte &#x3D; &#39;a&#39;\n&#125;</code></pre>\n<h2 id=\"1-4-额外知识\"><a href=\"#1-4-额外知识\" class=\"headerlink\" title=\"1.4.额外知识\"></a>1.4.额外知识</h2><ul>\n<li><p><strong>Golang的整数类型，默认声明为int类型</strong><br><img src=\"https://img-blog.csdnimg.cn/496a44e1dcea4b06a6ea6c618e367b9d.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li><p><strong>变量占用的字节数</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>首先要求变量所占用的字节数，需要引入<code>unsafe</code>这个包，然后使用这个包里面的<code>Sizeof</code>来求</p></blockquote>\n</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\nimport (\n\t&quot;fmt&quot;\n\t&quot;unsafe&quot; &#x2F;&#x2F; 引入包\n)\n\nfunc main()&#123;\n\t&#x2F;&#x2F; 直接使用\n\tvar num1 int8\n\tfmt.Println(unsafe.Sizeof(num1)) &#x2F;&#x2F; 1 \n\tvar num2 int16\n\tfmt.Println(unsafe.Sizeof(num2)) &#x2F;&#x2F; 2\n\tvar num3 int32\n\tfmt.Println(unsafe.Sizeof(num3)) &#x2F;&#x2F; 4\n\tvar num4 int64 \n\tfmt.Println(unsafe.Sizeof(num4)) &#x2F;&#x2F; 8\n&#125;</code></pre>\n\n<ul>\n<li><strong>这么多整数类型，使用的时候该如何选择呢？Golang程序中整型变量在使用时,遵守保小不保大的原则,  即: 在保证程序正确运行下,尽量使用占用空间小的数据类型</strong></li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 表示学生年龄\nvar age byte &#x3D; 8 &#x2F;&#x2F; 小的数据尽量用byte存放</code></pre>\n\n\n\n\n<h1 id=\"2-浮点类型\"><a href=\"#2-浮点类型\" class=\"headerlink\" title=\"2.浮点类型\"></a>2.浮点类型</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>简单来说，浮点类型就是用来存放小树值的， 如<code>3.14</code>，<code>5.20</code>，<code>-13.14</code>。</p></blockquote>\n<p>看下图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/f4a0084a3aa046db957649250fb23ab9.png\" alt=\"在这里插入图片描述\"></p>\n<p>在GO语言中，要创建浮点类型的变量，必须在<code>float</code>后面加上<code>32</code>或者<code>64</code>，因为<code>单纯的一个float</code>不会被当作浮点类型。</p>\n<ul>\n<li>当我们在赋值给一个浮点类型的变量时，我们可以直接赋值小数，也可以用E（或者e）（科学计数法）表示，如下：</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\nimport (\n\t&quot;fmt&quot;\n)\n\nfunc main()&#123;\n\tvar fa float32 &#x3D; 314E-2 &#x2F;&#x2F; E-2表示乘以10^-2\n\tvar fb float32 &#x3D; 314E+2 &#x2F;&#x2F; E+2表示乘以10^2\n\tvar fc float32 &#x3D; 314e-2 &#x2F;&#x2F; 小写e与大写E没有区别\n\tvar fd float32 &#x3D; 3.14 &#x2F;&#x2F; 直接赋值3.14\n\tfmt.Println(fa)  &#x2F;&#x2F; 3.14\n\tfmt.Println(fb)  &#x2F;&#x2F; 31400\n\tfmt.Println(fc)  &#x2F;&#x2F; 3.14\n\tfmt.Println(fd)  &#x2F;&#x2F; 3.14\n&#125;</code></pre>\n<ul>\n<li>我们在给float赋值的时候，很可能出现精度损失的情况，因此建议创建浮点类型的时候最好用<code>float64</code>。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\nimport &quot;fmt&quot;\n\nfunc main()&#123;\n\t&#x2F;&#x2F;浮点数可能会有精度的损失，所以通常情况下，建议你使用：float64 \n\tvar num7 float32 &#x3D; 520.000001314\n\tfmt.Println(num7)\n\tvar num8 float64 &#x3D; 520.000001314\n\tfmt.Println(num8)\n&#125;</code></pre>\n<p>运行结果：<br><img src=\"https://img-blog.csdnimg.cn/c2a471d49cd8427f8ca19f860b301945.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"3-字符类型\"><a href=\"#3-字符类型\" class=\"headerlink\" title=\"3.字符类型\"></a>3.字符类型</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>Golang中没有专门的字符类型，如果要存储单个字符(字母)，一般使用<code>byte</code>来保存。</li>\n<li>Golang中字符使用UTF-8编码<br><a href=\"http://www.mytju.com/classcode/tools/encode_utf8.asp\">UTF-8编码链接</a></li>\n</ul></blockquote>\n<p>UTF-8编码：<br><img src=\"https://img-blog.csdnimg.cn/43596cace7244ddda6b46d97c6f775f3.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>当我们用<code>byte类型来定义一个字符变量</code>，将其打印出来的值是其对应的<code>ASCLL</code>码值，各个字符的<code>ASCLL</code>码值对应如下：</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/014ebba595cc40dd9dea0dc6798fb407.png\" alt=\"在这里插入图片描述\"><br>示例如下：<br><img src=\"https://img-blog.csdnimg.cn/9cf7b322981147dcb39b24c6d742bc1d.png\" alt=\"在这里插入图片描述\"><br><strong>所以字符类型，本质上就是一个整数，也可以直接参与运算，输出字符的时候，会将对应的码值做一个输出，但如果我们用<code>Printf</code>打印（括号里要用<code>%c</code>），可以打印出字符：</strong><br><img src=\"https://img-blog.csdnimg.cn/7f21f1caf872498e87a5b0e05563b6f2.png\" alt=\"在这里插入图片描述\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果我们想要打印中文字符，比如打印一个中，这时<code>byte</code>类型就存放不下其对应的<code>ASCLL</code>码值了，所以这时我们应该使用<code>int</code>。</p></blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\nimport &quot;fmt&quot;\n\nfunc main()&#123;\n\tvar c int &#x3D; &#39;中&#39;\n\tfmt.Println(c)\n\t&#x2F;&#x2F;汉字字符，底层对应的是Unicode码值\n\t&#x2F;&#x2F;对应的码值为20013，byte类型溢出，能存储的范围：可以用int\n\t&#x2F;&#x2F;总结：Golang的字符对应的使用的是UTF-8编码\n\t&#x2F;&#x2F;（Unicode是对应的字符集，UTF-8是Unicode的其中的一种编码方案）\n&#125;</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/def5ca728cf54960ab75359876d2af6f.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h2><p>看下图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/334edc4a1b714f418d6459c4a8a4c89a.png\" alt=\"在这里插入图片描述\"></p>\n<p>通俗来说：</p>\n<ul>\n<li><p><code>\\b</code><br> 就是往前挪一格，掩盖挪动的那一格的数据。<br> <img src=\"https://img-blog.csdnimg.cn/ef8022ac42774ad29d220882bcd3a3bf.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li><p><code>\\n</code><br>就是换行，这个不用多说（haha）</p>\n</li>\n<li><p><code>\\r</code><br> 就是光标回到本行的开头，将<code>\\r</code>后面的字符依次覆盖前面的字符。<br> <img src=\"https://img-blog.csdnimg.cn/007126d7fab54913bbe39b61477f3681.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li><p><code>\\t</code><br>就是将<code>\\t</code>前面的字符串补够8个位置（不够8个位置），不够的话，则从那够了的8个再往后数。</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/9fb29fa51bf942b1b58fbf4de97c7f88.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><code>\\&quot;</code> , <code>\\&#39;</code> , <code>\\\\</code><br>这三个是为了在字符串中能够将<code>”</code>,<code>&#39;</code>,<code>\\</code>打印出来而不是与旁边的<code>&quot;&quot;</code>,<code>&#39;&#39;</code>,或者是转义匹配。</li>\n</ul>\n<p><strong>例如：</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/50f8d6318519495196e049f5cad47797.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"4-布尔类型\"><a href=\"#4-布尔类型\" class=\"headerlink\" title=\"4.布尔类型\"></a>4.布尔类型</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>布尔类型也叫bool类型，bool类型数据只允许取值true和false。</li>\n<li>布尔类型占1个字节。</li>\n<li>布尔类型适于逻辑运算，一般用于程序流程控制。</li>\n</ul></blockquote>\n<p><strong>基本的使用：</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\nimport &quot;fmt&quot;\nfunc main()&#123;\n        &#x2F;&#x2F;测试布尔类型的数值：\n        var flag1 bool &#x3D; true\n        fmt.Println(flag1) &#x2F;&#x2F; true\n        var flag2 bool &#x3D; false\n        fmt.Println(flag2) &#x2F;&#x2F; false\n        var flag3 bool &#x3D; 5 &lt; 9\n        fmt.Println(flag3) &#x2F;&#x2F; true，因为5的确小于9：为真\n&#125;</code></pre>\n\n\n<h1 id=\"5-字符串类型\"><a href=\"#5-字符串类型\" class=\"headerlink\" title=\"5.字符串类型\"></a>5.字符串类型</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>字符串类型用 <code>string</code> 来定义。</li>\n<li>字符串定义后就不能改变了（单指字符串，变量的值可以变）。</li>\n<li>字符串可以拼接。</li>\n<li>当一个字符串里面有转义的时候最好用 <strong>&#96;&#96;</strong> （<code>Esc</code>下面的按键）括起来（当然转义字符也可以）。</li>\n<li>当一个字符串过长时，最好换行，而换行的时候最好将运算符放在一行的最后面，因为如果不是符号在最后面，编译器会自动在这一行的后面加上<code>；</code>，我们看不见而已。</li>\n</ul></blockquote>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\nimport &quot;fmt&quot;\n\nfunc main()&#123;\n\n\n\t&#x2F;&#x2F; 定义一个字符串\n\tvar str1 string &#x3D; &quot;hello golang&quot;\n\tfmt.Println(str1) &#x2F;&#x2F; hello golang\n\n\n\t&#x2F;&#x2F; 转义字符过多时用&#96;&#96;括起来\n\tvar str2 string &#x3D; &#96;package main\n\timport &quot;fmt&quot;\n\tfunc main()&#123;\n\t\tfmt.Println(&quot;abc\\&quot;d\\&quot;efghijklm\\\\nopqrs\\\\tuvw&quot;)\n\t\t&#x2F;&#x2F; abc&quot;d&quot;efghijklm\\nopqrs\\tuvw\n\t&#125;&#96;\n\n\n\t&#x2F;&#x2F; 字符串拼接\n\tvar str3 string &#x3D; &quot;hahaha&quot; + &quot;hehehe&quot;\n\tstr3 +&#x3D; &quot;iloveyou&quot;\n\tfmt.Println(str3) &#x2F;&#x2F; hahahaheheheiloveyou\n\n\n\t&#x2F;&#x2F;当一个字符串过长的时候：注意：+保留在上一行的最后\n\tvar str4 string &#x3D; &quot;abc&quot; + &quot;def&quot; + &quot;abc&quot; + &quot;def&quot; + &quot;abc&quot; + &quot;def&quot; + &quot;abc&quot; +\n\t     &quot;def&quot;+ &quot;abc&quot; + &quot;def&quot; + &quot;abc&quot; + &quot;def&quot;+ &quot;abc&quot; + &quot;def&quot; + &quot;abc&quot; + &quot;def&quot;+\n\t\t&quot;abc&quot; + &quot;def&quot; + &quot;abc&quot; + &quot;def&quot;+ &quot;abc&quot; + &quot;def&quot; + &quot;abc&quot; + &quot;def&quot;+ &quot;abc&quot; +\n\t\t&quot;def&quot; + &quot;abc&quot; + &quot;def&quot;+ &quot;abc&quot; + &quot;def&quot; + &quot;abc&quot; + &quot;def&quot;+ &quot;abc&quot; + &quot;def&quot; + \n\t\t&quot;abc&quot; + &quot;def&quot;+ &quot;abc&quot; + &quot;def&quot;\n\tfmt.Println(str4)\n&#125;</code></pre>\n\n<h1 id=\"6-基本数据类型的默认值\"><a href=\"#6-基本数据类型的默认值\" class=\"headerlink\" title=\"6.基本数据类型的默认值\"></a>6.基本数据类型的默认值</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在Golang中数据类型都有一个默认值，当程序员没有赋值时，就会保留默认值(默认值又叫零值)。</p></blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/962500a537234e9094002751deb45d49.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"7-基本数据类型之间的转换\"><a href=\"#7-基本数据类型之间的转换\" class=\"headerlink\" title=\"7.基本数据类型之间的转换\"></a>7.基本数据类型之间的转换</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Go在不同类型的变量之间赋值时需要显式转换，并且只有显式转换(强制转换)。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>语法形式：<br><code>表达式T(v)将值v转换为类型T</code><br><code>T : 就是数据类型</code><br><code>v : 就是需要转换的变量</code></p></blockquote>\n<p><strong>例如：</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\nimport &quot;fmt&quot;\n\nfunc main()&#123;\n\tvar num1 int &#x3D; 1000\n\tvar f1 float32 &#x3D; float32(num1)\n\tfmt.Println(f1) &#x2F;&#x2F; 1000\n\n\tvar f2 float32 &#x3D; 666.66\n\tvar num2 int &#x3D; int(f2)\n\tfmt.Println(num2) &#x2F;&#x2F; 66\n&#125;</code></pre>\n\n\n<p><strong>但如过一个大的值强制转换为一个不能存放这个大数据的值的类型时，编译器不会报错，但运行后会造成数据的溢出（截断）：</strong><br><strong>例如：</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\nimport &quot;fmt&quot;\n\nfunc main()&#123;\n\t&#x2F;&#x2F; 将int64转为int8的时候，编译不会出错的，但是会数据的溢出\n\tvar n1 int64 &#x3D; 666666\n\tvar n2 int8 &#x3D; int8(n3)\n\t&#x2F;&#x2F; 这里发生了截断\n\tfmt.Println(n2)&#x2F;&#x2F;56\n&#125;</code></pre>\n\n<h1 id=\"8-基本数据类型转为string\"><a href=\"#8-基本数据类型转为string\" class=\"headerlink\" title=\"8.基本数据类型转为string\"></a>8.基本数据类型转为<code>string</code></h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>在程序开发中，我们经常需要将基本数据类型转成string类型。或者将string类型转成基本数据类型。</li>\n<li>将基本数据类型转化为<code>string</code>有两种方式：<br>1.<code>fmt</code>包中的<code>Sprintf</code>（<code>“%参数”</code>， <code>要转换的变量</code>（<code>注意</code>：原先的变量值不变，只是将面值赋给一个string类型的变量））— <code>推荐</code>。<br>2.使用<code>strconv</code>包中的函数。</li>\n</ul></blockquote>\n<ul>\n<li>第一种方式转换如下：</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\nimport &quot;fmt&quot;\nfunc main()&#123;\n\tvar n1 int &#x3D; 19\n\tvar n2 float32 &#x3D; 4.78\n\tvar n3 bool &#x3D; false\n\tvar n4 byte &#x3D; &#39;a&#39;\n\n\tvar s1 string &#x3D; fmt.Sprintf(&quot;%d&quot;,n1)\n\tfmt.Printf(&quot;s1对应的类型是：%T ，s1 &#x3D; %q \\n&quot;,s1, s1)\n\n\tvar s2 string &#x3D; fmt.Sprintf(&quot;%f&quot;,n2)\n\tfmt.Printf(&quot;s2对应的类型是：%T ，s2 &#x3D; %q \\n&quot;,s2, s2)\n\n\tvar s3 string &#x3D; fmt.Sprintf(&quot;%t&quot;,n3)\n\tfmt.Printf(&quot;s3对应的类型是：%T ，s3 &#x3D; %q \\n&quot;,s3, s3)\n\t\n\tvar s4 string &#x3D; fmt.Sprintf(&quot;%c&quot;,n4)\n\tfmt.Printf(&quot;s4对应的类型是：%T ，s4 &#x3D; %q \\n&quot;,s4, s4)\n&#125;\n</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/57331e9fcda04437ae519b18a3e5fb25.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>第二种方式转换我们还需了解<code>strconv</code>包,以及包中我们将要用到的函数。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/7a0e1867d22947b3813f30d936246ac2.png\" alt=\"在这里插入图片描述\"></p>\n<p>根据函数的功能及使用，如下转换：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\nimport(\n        &quot;fmt&quot;\n        &quot;strconv&quot;\n)\nfunc main()&#123;\n        var n1 int &#x3D; 18\n        var s1 string &#x3D; strconv.FormatInt(int64(n1),10)  &#x2F;&#x2F;参数：第一个参数必须转为int64类型 ，第二个参数指定字面值的进制形式为十进制\n        fmt.Printf(&quot;s1对应的类型是：%T ，s1 &#x3D; %q \\n&quot;,s1, s1)\n        \n        var n2 float64 &#x3D; 4.29\n        var s2 string &#x3D; strconv.FormatFloat(n2,&#39;f&#39;,9,64)\n        &#x2F;&#x2F;第二个参数：&#39;f&#39;（-ddd.dddd）  第三个参数：9 保留小数点后面9位  第四个参数：表示这个小数是float64类型\n        fmt.Printf(&quot;s2对应的类型是：%T ，s2 &#x3D; %q \\n&quot;,s2, s2)\n        \n        var n3 bool &#x3D; true\n        var s3 string &#x3D; strconv.FormatBool(n3)\n        fmt.Printf(&quot;s3对应的类型是：%T ，s3 &#x3D; %q \\n&quot;,s3, s3)\n&#125;\n</code></pre>\n\n\n\n<h1 id=\"9-string转为基本数据类型\"><a href=\"#9-string转为基本数据类型\" class=\"headerlink\" title=\"9.string转为基本数据类型\"></a>9.<code>string</code>转为基本数据类型</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>将<code>string</code>转为基本数据类型的方式是使用<code>strconv</code>包中的函数。</p></blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/c95344a29abe4abb9653b9ef59314e3b.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/239974684e3345c6a852152164fe497d.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/517075e189a24ca6982b15402a471f82.png\" alt=\"在这里插入图片描述\"></p>\n<p>下面通过使用函数来代码实现转化：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\nimport(\n        &quot;fmt&quot;\n        &quot;strconv&quot;\n)\n\nfunc main()&#123;\n&#x2F;&#x2F;1. string 转 bool\n        &#x2F;&#x2F;string--&gt;bool\n        var s1 string &#x3D; &quot;true&quot;\n        var b bool\n        &#x2F;&#x2F;ParseBool这个函数的返回值有两个：(value bool, err error)\n        &#x2F;&#x2F;value就是我们得到的布尔类型的数据，err出现的错误\n        &#x2F;&#x2F;我们只关注得到的布尔类型的数据，err可以用_直接忽略\n        b , _ &#x3D; strconv.ParseBool(s1)\n        fmt.Printf(&quot;b的类型是：%T,b&#x3D;%v \\n&quot;,b,b)\n&#x2F;&#x2F;2.  string 转 int64        \n        &#x2F;&#x2F;string---》int64\n        var s2 string &#x3D; &quot;19&quot;\n        var num1 int64\n        num1,_ &#x3D; strconv.ParseInt(s2,10,64)\n        fmt.Printf(&quot;num1的类型是：%T,num1&#x3D;%v \\n&quot;,num1,num1)\n&#x2F;&#x2F;3.  string 转 float64        \n        &#x2F;&#x2F;string--&gt;float32&#x2F;float64\n        var s3 string &#x3D; &quot;3.14&quot;\n        var f1 float64\n        f1,_ &#x3D; strconv.ParseFloat(s3,64)\n        fmt.Printf(&quot;f1的类型是：%T,f1&#x3D;%v \\n&quot;,f1,f1)\n&#x2F;&#x2F;4.        \n        &#x2F;&#x2F;注意：string向基本数据类型转换的时候，\n        &#x2F;&#x2F;一定要确保string类型能够\n        &#x2F;&#x2F;转成有效的数据类型，\n        &#x2F;&#x2F;否则最后得到的结果就是按照对应类型的默认值输出\n        var s4 string &#x3D; &quot;golang&quot;\n        var b1 bool\n        b1 , _ &#x3D; strconv.ParseBool(s4)\n        fmt.Printf(&quot;b1的类型是：%T,b1&#x3D;%v \\n&quot;,b1,b1)\n&#x2F;&#x2F;5.        \n        var s5 string &#x3D; &quot;golang&quot;\n        var num2 int64\n        num2,_ &#x3D; strconv.ParseInt(s5,10,64)\n        fmt.Printf(&quot;num2的类型是：%T,num2&#x3D;%v \\n&quot;,num2,num2)\n&#125;</code></pre>\n<p><strong>运行结果为：</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/4f1b77b81c5743f5bb7678c5fe0d3a29.png\" alt=\"在这里插入图片描述\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>可以看到，b1与 num2的值都是默认值。</p></blockquote>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>GO语言需要求精的地方多，不能放过每一个部分，不然出来的代码就很可能会不够严谨。</p></blockquote>\n<p><strong>感谢阅读本小白的博客，错误的地方请严厉指出噢！</strong></p>\n","text":"1.整数类型 整数类型就是存放整数的，如18 ，-18，123534等，在GO语言中，几乎不同于其它语言，以字节的视角来看其int类型还分为不同的int表达，首先int还要分为两大类。 1.1.有符号整数类型 有符号就是整数有正负之分 我们来看下图：可以看到，这4个int后面都带...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"GO语言相关知识的深度解析","slug":"GO语言相关知识的深度解析","count":1,"path":"api/categories/GO语言相关知识的深度解析.json"}],"tags":[{"name":"GO语言","slug":"GO语言","count":1,"path":"api/tags/GO语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1.整数类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E6%9C%89%E7%AC%A6%E5%8F%B7%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1.1.有符号整数类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E6%97%A0%E7%AC%A6%E5%8F%B7%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1.2.无符号整数类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-%E5%85%B6%E4%BB%96%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1.3.其他整数类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-4-%E9%A2%9D%E5%A4%96%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">1.4.额外知识</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E6%B5%AE%E7%82%B9%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.浮点类型</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3.字符类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">转义字符</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">4.布尔类型</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">5.字符串类型</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">6.基本数据类型的默认值</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">7.基本数据类型之间的转换</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#8-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E4%B8%BAstring\"><span class=\"toc-text\">8.基本数据类型转为string</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#9-string%E8%BD%AC%E4%B8%BA%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">9.string转为基本数据类型</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E\"><span class=\"toc-text\">写在最后</span></a></li></ol>","author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"C语言常见字符串函数的解析和部分字符串函数的实现","uid":"19cad4ee9072e8ab86cabc2b83a8e850","slug":"C语言常见字符串函数的解析和部分字符串函数的实现","date":"2023-02-18T04:01:12.000Z","updated":"2023-02-18T04:03:06.381Z","comments":true,"path":"api/articles/C语言常见字符串函数的解析和部分字符串函数的实现.json","keywords":null,"cover":"/photo/p55.jpeg","text":"前言 常见的字符串函数在一定程度上可以让我们在写代码，或者是在刷某些有关字符串的题目时事半功倍，并且常见字符串函数的功能非常常用，因此我们应该熟练使用这些字符串函数，以及部分函数要能自我实现。 字符串函数都要引入一个库函数：string(#include &lt;string.h...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":22,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":22,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}},"next_post":{"title":"深度解析数据在内存中的存储","uid":"daac20e59d5dd80457865681aac90392","slug":"深度解析数据在内存中的存储","date":"2023-02-18T03:46:23.000Z","updated":"2023-02-18T03:49:26.069Z","comments":true,"path":"api/articles/深度解析数据在内存中的存储.json","keywords":null,"cover":"/photo/p5.jpeg","text":"1. 数据类型详细介绍 char // 字符数据类型short // 短整型int // 整型 long // 长整型long long // 更长的整型float // 单精度浮点数double // 双精度浮点数 1.1.类型的基本归类1.整型家族char unsigned ...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"C语言相关知识的深度解析","slug":"C语言相关知识的深度解析","count":22,"path":"api/categories/C语言相关知识的深度解析.json"}],"tags":[{"name":"C语言","slug":"C语言","count":22,"path":"api/tags/C语言.json"}],"author":{"name":"坏 幸 运","slug":"blog-author","avatar":"/photo/微信图片_20230209190414.jpg","link":"/","description":"Believe in yourself, you can do it --- <Learn from each other> WX-xmdx99999999","socials":{"github":"https://github.com/Wennun/Wennun.github.io","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/Wennytime","juejin":"","customs":{}}}}}